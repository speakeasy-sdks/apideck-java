/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package apideck.ats.apideck.models.shared;

import apideck.ats.apideck.utils.DateTimeDeserializer;
import apideck.ats.apideck.utils.DateTimeSerializer;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;


public class Job {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    public Address[] addresses;

    public Job withAddresses(Address[] addresses) {
        this.addresses = addresses;
        return this;
    }
    
    /**
     * Specifies whether an employee of the organization can apply for the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available_to_employees")
    public Boolean availableToEmployees;

    public Job withAvailableToEmployees(Boolean availableToEmployees) {
        this.availableToEmployees = availableToEmployees;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blocks")
    public JobBlocks[] blocks;

    public Job withBlocks(JobBlocks[] blocks) {
        this.blocks = blocks;
        return this;
    }
    
    /**
     * Details of the branch for which the job is created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("branch")
    public JobBranch branch;

    public Job withBranch(JobBranch branch) {
        this.branch = branch;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closing")
    public String closing;

    public Job withClosing(String closing) {
        this.closing = closing;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("closing_date")
    public LocalDate closingDate;

    public Job withClosingDate(LocalDate closingDate) {
        this.closingDate = closingDate;
        return this;
    }
    
    /**
     * The closing section of the job description in HTML format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closing_html")
    public String closingHtml;

    public Job withClosingHtml(String closingHtml) {
        this.closingHtml = closingHtml;
        return this;
    }
    
    /**
     * The code of the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    public String code;

    public Job withCode(String code) {
        this.code = code;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("confidential")
    public Boolean confidential;

    public Job withConfidential(Boolean confidential) {
        this.confidential = confidential;
        return this;
    }
    
    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public Job withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    public String createdBy;

    public Job withCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    public CustomField[] customFields;

    public Job withCustomFields(CustomField[] customFields) {
        this.customFields = customFields;
        return this;
    }
    
    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    public Boolean deleted;

    public Job withDeleted(Boolean deleted) {
        this.deleted = deleted;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    public Department department;

    public Job withDepartment(Department department) {
        this.department = department;
        return this;
    }
    
    /**
     * A description of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Job withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The job description in HTML format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description_html")
    public String descriptionHtml;

    public Job withDescriptionHtml(String descriptionHtml) {
        this.descriptionHtml = descriptionHtml;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_terms")
    public JobEmploymentTerms employmentTerms;

    public Job withEmploymentTerms(JobEmploymentTerms employmentTerms) {
        this.employmentTerms = employmentTerms;
        return this;
    }
    
    /**
     * Level of experience required for the job role.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("experience")
    public String experience;

    public Job withExperience(String experience) {
        this.experience = experience;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followers")
    public String[] followers;

    public Job withFollowers(String[] followers) {
        this.followers = followers;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hiring_managers")
    public String[] hiringManagers;

    public Job withHiringManagers(String[] hiringManagers) {
        this.hiringManagers = hiringManagers;
        return this;
    }
    
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Job withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * URL of the job portal
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_portal_url")
    @Deprecated
    public String jobPortalUrl;

    @Deprecated
    public Job withJobPortalUrl(String jobPortalUrl) {
        this.jobPortalUrl = jobPortalUrl;
        return this;
    }
    
    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    public String language;

    public Job withLanguage(String language) {
        this.language = language;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("links")
    public JobLinks[] links;

    public Job withLinks(JobLinks[] links) {
        this.links = links;
        return this;
    }
    
    /**
     * Specifies the location for the job posting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;

    public Job withLocation(String location) {
        this.location = location;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    public String ownerId;

    public Job withOwnerId(String ownerId) {
        this.ownerId = ownerId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("published_at")
    public OffsetDateTime publishedAt;

    public Job withPublishedAt(OffsetDateTime publishedAt) {
        this.publishedAt = publishedAt;
        return this;
    }
    
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_url")
    @Deprecated
    public String recordUrl;

    @Deprecated
    public Job withRecordUrl(String recordUrl) {
        this.recordUrl = recordUrl;
        return this;
    }
    
    /**
     * The recruiter is generally someone who is tasked to help the hiring manager find and screen qualified applicant
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recruiters")
    public String[] recruiters;

    public Job withRecruiters(String[] recruiters) {
        this.recruiters = recruiters;
        return this;
    }
    
    /**
     * Specifies whether the posting is for a remote job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote")
    public Boolean remote;

    public Job withRemote(Boolean remote) {
        this.remote = remote;
        return this;
    }
    
    /**
     * A job's Requisition ID (Req ID) allows your organization to identify and track a job based on alphanumeric naming conventions unique to your company's internal processes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requisition_id")
    public String requisitionId;

    public Job withRequisitionId(String requisitionId) {
        this.requisitionId = requisitionId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salary")
    public JobSalary salary;

    public Job withSalary(JobSalary salary) {
        this.salary = salary;
        return this;
    }
    
    /**
     * Sequence in relation to other jobs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sequence")
    public Long sequence;

    public Job withSequence(Long sequence) {
        this.sequence = sequence;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slug")
    public String slug;

    public Job withSlug(String slug) {
        this.slug = slug;
        return this;
    }
    
    /**
     * The status of the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public JobStatus status;

    public Job withStatus(JobStatus status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public String[] tags;

    public Job withTags(String[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * The job title of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public Job withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;

    public Job withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    public String updatedBy;

    public Job withUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }
    
    /**
     * URL of the job description
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    @Deprecated
    public String url;

    @Deprecated
    public Job withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * The visibility of the job
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visibility")
    public JobVisibility visibility;

    public Job withVisibility(JobVisibility visibility) {
        this.visibility = visibility;
        return this;
    }
    
    public Job(){}
}
