/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package apideck.ats.apideck;

import apideck.ats.apideck.models.errors.SDKError;
import apideck.ats.apideck.models.operations.SDKMethodInterfaces.*;
import apideck.ats.apideck.utils.HTTPClient;
import apideck.ats.apideck.utils.HTTPRequest;
import apideck.ats.apideck.utils.JSON;
import apideck.ats.apideck.utils.Utils;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.Optional;
import org.apache.http.NameValuePair;
import org.openapitools.jackson.nullable.JsonNullable;

public class Jobs implements
            MethodCallJobsAll,
            MethodCallJobsOne {

    private final SDKConfiguration sdkConfiguration;

    Jobs(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public apideck.ats.apideck.models.operations.JobsAllRequestBuilder all() {
        return new apideck.ats.apideck.models.operations.JobsAllRequestBuilder(this);
    }

    /**
     * List Jobs
     * List Jobs
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public apideck.ats.apideck.models.operations.JobsAllResponse all(
            apideck.ats.apideck.models.operations.JobsAllRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = apideck.ats.apideck.utils.Utils.generateURL(
                baseUrl,
                "/ats/jobs");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = apideck.ats.apideck.utils.Utils.getQueryParams(
                apideck.ats.apideck.models.operations.JobsAllRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        java.util.Map<String, java.util.List<String>> headers = apideck.ats.apideck.utils.Utils.getHeaders(request, this.sdkConfiguration.globals);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }

        HTTPClient client = apideck.ats.apideck.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        apideck.ats.apideck.models.operations.JobsAllResponse.Builder resBuilder = 
            apideck.ats.apideck.models.operations.JobsAllResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        apideck.ats.apideck.models.operations.JobsAllResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (apideck.ats.apideck.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                apideck.ats.apideck.models.shared.GetJobsResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<apideck.ats.apideck.models.shared.GetJobsResponse>() {});
                res.withGetJobsResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 400) {
            if (apideck.ats.apideck.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                apideck.ats.apideck.models.shared.BadRequestResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<apideck.ats.apideck.models.shared.BadRequestResponse>() {});
                res.withBadRequestResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 401) {
            if (apideck.ats.apideck.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                apideck.ats.apideck.models.shared.UnauthorizedResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<apideck.ats.apideck.models.shared.UnauthorizedResponse>() {});
                res.withUnauthorizedResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 402) {
            if (apideck.ats.apideck.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                apideck.ats.apideck.models.shared.PaymentRequiredResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<apideck.ats.apideck.models.shared.PaymentRequiredResponse>() {});
                res.withPaymentRequiredResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 404) {
            if (apideck.ats.apideck.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                apideck.ats.apideck.models.shared.NotFoundResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<apideck.ats.apideck.models.shared.NotFoundResponse>() {});
                res.withNotFoundResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 422) {
            if (apideck.ats.apideck.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                apideck.ats.apideck.models.shared.UnprocessableResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<apideck.ats.apideck.models.shared.UnprocessableResponse>() {});
                res.withUnprocessableResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (apideck.ats.apideck.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                apideck.ats.apideck.models.shared.UnexpectedErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<apideck.ats.apideck.models.shared.UnexpectedErrorResponse>() {});
                res.withUnexpectedErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public apideck.ats.apideck.models.operations.JobsOneRequestBuilder one() {
        return new apideck.ats.apideck.models.operations.JobsOneRequestBuilder(this);
    }

    /**
     * Get Job
     * Get Job
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public apideck.ats.apideck.models.operations.JobsOneResponse one(
            apideck.ats.apideck.models.operations.JobsOneRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = apideck.ats.apideck.utils.Utils.generateURL(
                apideck.ats.apideck.models.operations.JobsOneRequest.class,
                baseUrl,
                "/ats/jobs/{id}",
                request, this.sdkConfiguration.globals);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = apideck.ats.apideck.utils.Utils.getQueryParams(
                apideck.ats.apideck.models.operations.JobsOneRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        java.util.Map<String, java.util.List<String>> headers = apideck.ats.apideck.utils.Utils.getHeaders(request, this.sdkConfiguration.globals);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }

        HTTPClient client = apideck.ats.apideck.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        apideck.ats.apideck.models.operations.JobsOneResponse.Builder resBuilder = 
            apideck.ats.apideck.models.operations.JobsOneResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        apideck.ats.apideck.models.operations.JobsOneResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (apideck.ats.apideck.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                apideck.ats.apideck.models.shared.GetJobResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<apideck.ats.apideck.models.shared.GetJobResponse>() {});
                res.withGetJobResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 400) {
            if (apideck.ats.apideck.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                apideck.ats.apideck.models.shared.BadRequestResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<apideck.ats.apideck.models.shared.BadRequestResponse>() {});
                res.withBadRequestResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 401) {
            if (apideck.ats.apideck.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                apideck.ats.apideck.models.shared.UnauthorizedResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<apideck.ats.apideck.models.shared.UnauthorizedResponse>() {});
                res.withUnauthorizedResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 402) {
            if (apideck.ats.apideck.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                apideck.ats.apideck.models.shared.PaymentRequiredResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<apideck.ats.apideck.models.shared.PaymentRequiredResponse>() {});
                res.withPaymentRequiredResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 404) {
            if (apideck.ats.apideck.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                apideck.ats.apideck.models.shared.NotFoundResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<apideck.ats.apideck.models.shared.NotFoundResponse>() {});
                res.withNotFoundResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 422) {
            if (apideck.ats.apideck.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                apideck.ats.apideck.models.shared.UnprocessableResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<apideck.ats.apideck.models.shared.UnprocessableResponse>() {});
                res.withUnprocessableResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (apideck.ats.apideck.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                apideck.ats.apideck.models.shared.UnexpectedErrorResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<apideck.ats.apideck.models.shared.UnexpectedErrorResponse>() {});
                res.withUnexpectedErrorResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
