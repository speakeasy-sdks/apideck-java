/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package apideck.ats.apideck.models.shared;

import apideck.ats.apideck.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapitools.jackson.nullable.JsonNullable;


public class Address {

    /**
     * Name of city.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private JsonNullable<? extends String> city;

    /**
     * Name of the contact person at the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contact_name")
    private JsonNullable<? extends String> contactName;

    /**
     * country code according to ISO 3166-1 alpha-2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<? extends String> country;

    /**
     * Address field that holds a sublocality, such as a county
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("county")
    private JsonNullable<? extends String> county;

    /**
     * Email address of the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private JsonNullable<? extends String> email;

    /**
     * Fax number of the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fax")
    private JsonNullable<? extends String> fax;

    /**
     * Unique identifier for the address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<? extends String> id;

    /**
     * Latitude of the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latitude")
    private JsonNullable<? extends String> latitude;

    /**
     * Line 1 of the address e.g. number, street, suite, apt #, etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line1")
    private JsonNullable<? extends String> line1;

    /**
     * Line 2 of the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line2")
    private JsonNullable<? extends String> line2;

    /**
     * Line 3 of the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line3")
    private JsonNullable<? extends String> line3;

    /**
     * Line 4 of the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line4")
    private JsonNullable<? extends String> line4;

    /**
     * Longitude of the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longitude")
    private JsonNullable<? extends String> longitude;

    /**
     * The name of the address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<? extends String> name;

    /**
     * Additional notes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    private JsonNullable<? extends String> notes;

    /**
     * Phone number of the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number")
    private JsonNullable<? extends String> phoneNumber;

    /**
     * Zip code or equivalent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postal_code")
    private JsonNullable<? extends String> postalCode;

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    private JsonNullable<? extends String> rowVersion;

    /**
     * Salutation of the contact person at the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salutation")
    private JsonNullable<? extends String> salutation;

    /**
     * Name of state
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private JsonNullable<? extends String> state;

    /**
     * Street number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street_number")
    private JsonNullable<? extends String> streetNumber;

    /**
     * The address string. Some APIs don't provide structured address data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("string")
    private JsonNullable<? extends String> string;

    /**
     * The type of address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<? extends Type> type;

    /**
     * Website of the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("website")
    private JsonNullable<? extends String> website;

    public Address(
            @JsonProperty("city") JsonNullable<? extends String> city,
            @JsonProperty("contact_name") JsonNullable<? extends String> contactName,
            @JsonProperty("country") JsonNullable<? extends String> country,
            @JsonProperty("county") JsonNullable<? extends String> county,
            @JsonProperty("email") JsonNullable<? extends String> email,
            @JsonProperty("fax") JsonNullable<? extends String> fax,
            @JsonProperty("id") JsonNullable<? extends String> id,
            @JsonProperty("latitude") JsonNullable<? extends String> latitude,
            @JsonProperty("line1") JsonNullable<? extends String> line1,
            @JsonProperty("line2") JsonNullable<? extends String> line2,
            @JsonProperty("line3") JsonNullable<? extends String> line3,
            @JsonProperty("line4") JsonNullable<? extends String> line4,
            @JsonProperty("longitude") JsonNullable<? extends String> longitude,
            @JsonProperty("name") JsonNullable<? extends String> name,
            @JsonProperty("notes") JsonNullable<? extends String> notes,
            @JsonProperty("phone_number") JsonNullable<? extends String> phoneNumber,
            @JsonProperty("postal_code") JsonNullable<? extends String> postalCode,
            @JsonProperty("row_version") JsonNullable<? extends String> rowVersion,
            @JsonProperty("salutation") JsonNullable<? extends String> salutation,
            @JsonProperty("state") JsonNullable<? extends String> state,
            @JsonProperty("street_number") JsonNullable<? extends String> streetNumber,
            @JsonProperty("string") JsonNullable<? extends String> string,
            @JsonProperty("type") JsonNullable<? extends Type> type,
            @JsonProperty("website") JsonNullable<? extends String> website) {
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(contactName, "contactName");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(county, "county");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(fax, "fax");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(latitude, "latitude");
        Utils.checkNotNull(line1, "line1");
        Utils.checkNotNull(line2, "line2");
        Utils.checkNotNull(line3, "line3");
        Utils.checkNotNull(line4, "line4");
        Utils.checkNotNull(longitude, "longitude");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(notes, "notes");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(rowVersion, "rowVersion");
        Utils.checkNotNull(salutation, "salutation");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(streetNumber, "streetNumber");
        Utils.checkNotNull(string, "string");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(website, "website");
        this.city = city;
        this.contactName = contactName;
        this.country = country;
        this.county = county;
        this.email = email;
        this.fax = fax;
        this.id = id;
        this.latitude = latitude;
        this.line1 = line1;
        this.line2 = line2;
        this.line3 = line3;
        this.line4 = line4;
        this.longitude = longitude;
        this.name = name;
        this.notes = notes;
        this.phoneNumber = phoneNumber;
        this.postalCode = postalCode;
        this.rowVersion = rowVersion;
        this.salutation = salutation;
        this.state = state;
        this.streetNumber = streetNumber;
        this.string = string;
        this.type = type;
        this.website = website;
    }

    /**
     * Name of city.
     */
    public JsonNullable<? extends String> city() {
        return city;
    }

    /**
     * Name of the contact person at the address
     */
    public JsonNullable<? extends String> contactName() {
        return contactName;
    }

    /**
     * country code according to ISO 3166-1 alpha-2.
     */
    public JsonNullable<? extends String> country() {
        return country;
    }

    /**
     * Address field that holds a sublocality, such as a county
     */
    public JsonNullable<? extends String> county() {
        return county;
    }

    /**
     * Email address of the address
     */
    public JsonNullable<? extends String> email() {
        return email;
    }

    /**
     * Fax number of the address
     */
    public JsonNullable<? extends String> fax() {
        return fax;
    }

    /**
     * Unique identifier for the address.
     */
    public JsonNullable<? extends String> id() {
        return id;
    }

    /**
     * Latitude of the address
     */
    public JsonNullable<? extends String> latitude() {
        return latitude;
    }

    /**
     * Line 1 of the address e.g. number, street, suite, apt #, etc.
     */
    public JsonNullable<? extends String> line1() {
        return line1;
    }

    /**
     * Line 2 of the address
     */
    public JsonNullable<? extends String> line2() {
        return line2;
    }

    /**
     * Line 3 of the address
     */
    public JsonNullable<? extends String> line3() {
        return line3;
    }

    /**
     * Line 4 of the address
     */
    public JsonNullable<? extends String> line4() {
        return line4;
    }

    /**
     * Longitude of the address
     */
    public JsonNullable<? extends String> longitude() {
        return longitude;
    }

    /**
     * The name of the address.
     */
    public JsonNullable<? extends String> name() {
        return name;
    }

    /**
     * Additional notes
     */
    public JsonNullable<? extends String> notes() {
        return notes;
    }

    /**
     * Phone number of the address
     */
    public JsonNullable<? extends String> phoneNumber() {
        return phoneNumber;
    }

    /**
     * Zip code or equivalent.
     */
    public JsonNullable<? extends String> postalCode() {
        return postalCode;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public JsonNullable<? extends String> rowVersion() {
        return rowVersion;
    }

    /**
     * Salutation of the contact person at the address
     */
    public JsonNullable<? extends String> salutation() {
        return salutation;
    }

    /**
     * Name of state
     */
    public JsonNullable<? extends String> state() {
        return state;
    }

    /**
     * Street number
     */
    public JsonNullable<? extends String> streetNumber() {
        return streetNumber;
    }

    /**
     * The address string. Some APIs don't provide structured address data.
     */
    public JsonNullable<? extends String> string() {
        return string;
    }

    /**
     * The type of address.
     */
    public JsonNullable<? extends Type> type() {
        return type;
    }

    /**
     * Website of the address
     */
    public JsonNullable<? extends String> website() {
        return website;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Name of city.
     */
    public Address withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = JsonNullable.of(city);
        return this;
    }

    /**
     * Name of city.
     */
    public Address withCity(JsonNullable<? extends String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * Name of the contact person at the address
     */
    public Address withContactName(String contactName) {
        Utils.checkNotNull(contactName, "contactName");
        this.contactName = JsonNullable.of(contactName);
        return this;
    }

    /**
     * Name of the contact person at the address
     */
    public Address withContactName(JsonNullable<? extends String> contactName) {
        Utils.checkNotNull(contactName, "contactName");
        this.contactName = contactName;
        return this;
    }

    /**
     * country code according to ISO 3166-1 alpha-2.
     */
    public Address withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * country code according to ISO 3166-1 alpha-2.
     */
    public Address withCountry(JsonNullable<? extends String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * Address field that holds a sublocality, such as a county
     */
    public Address withCounty(String county) {
        Utils.checkNotNull(county, "county");
        this.county = JsonNullable.of(county);
        return this;
    }

    /**
     * Address field that holds a sublocality, such as a county
     */
    public Address withCounty(JsonNullable<? extends String> county) {
        Utils.checkNotNull(county, "county");
        this.county = county;
        return this;
    }

    /**
     * Email address of the address
     */
    public Address withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = JsonNullable.of(email);
        return this;
    }

    /**
     * Email address of the address
     */
    public Address withEmail(JsonNullable<? extends String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * Fax number of the address
     */
    public Address withFax(String fax) {
        Utils.checkNotNull(fax, "fax");
        this.fax = JsonNullable.of(fax);
        return this;
    }

    /**
     * Fax number of the address
     */
    public Address withFax(JsonNullable<? extends String> fax) {
        Utils.checkNotNull(fax, "fax");
        this.fax = fax;
        return this;
    }

    /**
     * Unique identifier for the address.
     */
    public Address withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * Unique identifier for the address.
     */
    public Address withId(JsonNullable<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Latitude of the address
     */
    public Address withLatitude(String latitude) {
        Utils.checkNotNull(latitude, "latitude");
        this.latitude = JsonNullable.of(latitude);
        return this;
    }

    /**
     * Latitude of the address
     */
    public Address withLatitude(JsonNullable<? extends String> latitude) {
        Utils.checkNotNull(latitude, "latitude");
        this.latitude = latitude;
        return this;
    }

    /**
     * Line 1 of the address e.g. number, street, suite, apt #, etc.
     */
    public Address withLine1(String line1) {
        Utils.checkNotNull(line1, "line1");
        this.line1 = JsonNullable.of(line1);
        return this;
    }

    /**
     * Line 1 of the address e.g. number, street, suite, apt #, etc.
     */
    public Address withLine1(JsonNullable<? extends String> line1) {
        Utils.checkNotNull(line1, "line1");
        this.line1 = line1;
        return this;
    }

    /**
     * Line 2 of the address
     */
    public Address withLine2(String line2) {
        Utils.checkNotNull(line2, "line2");
        this.line2 = JsonNullable.of(line2);
        return this;
    }

    /**
     * Line 2 of the address
     */
    public Address withLine2(JsonNullable<? extends String> line2) {
        Utils.checkNotNull(line2, "line2");
        this.line2 = line2;
        return this;
    }

    /**
     * Line 3 of the address
     */
    public Address withLine3(String line3) {
        Utils.checkNotNull(line3, "line3");
        this.line3 = JsonNullable.of(line3);
        return this;
    }

    /**
     * Line 3 of the address
     */
    public Address withLine3(JsonNullable<? extends String> line3) {
        Utils.checkNotNull(line3, "line3");
        this.line3 = line3;
        return this;
    }

    /**
     * Line 4 of the address
     */
    public Address withLine4(String line4) {
        Utils.checkNotNull(line4, "line4");
        this.line4 = JsonNullable.of(line4);
        return this;
    }

    /**
     * Line 4 of the address
     */
    public Address withLine4(JsonNullable<? extends String> line4) {
        Utils.checkNotNull(line4, "line4");
        this.line4 = line4;
        return this;
    }

    /**
     * Longitude of the address
     */
    public Address withLongitude(String longitude) {
        Utils.checkNotNull(longitude, "longitude");
        this.longitude = JsonNullable.of(longitude);
        return this;
    }

    /**
     * Longitude of the address
     */
    public Address withLongitude(JsonNullable<? extends String> longitude) {
        Utils.checkNotNull(longitude, "longitude");
        this.longitude = longitude;
        return this;
    }

    /**
     * The name of the address.
     */
    public Address withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The name of the address.
     */
    public Address withName(JsonNullable<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Additional notes
     */
    public Address withNotes(String notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = JsonNullable.of(notes);
        return this;
    }

    /**
     * Additional notes
     */
    public Address withNotes(JsonNullable<? extends String> notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = notes;
        return this;
    }

    /**
     * Phone number of the address
     */
    public Address withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = JsonNullable.of(phoneNumber);
        return this;
    }

    /**
     * Phone number of the address
     */
    public Address withPhoneNumber(JsonNullable<? extends String> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * Zip code or equivalent.
     */
    public Address withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = JsonNullable.of(postalCode);
        return this;
    }

    /**
     * Zip code or equivalent.
     */
    public Address withPostalCode(JsonNullable<? extends String> postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public Address withRowVersion(String rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = JsonNullable.of(rowVersion);
        return this;
    }

    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    public Address withRowVersion(JsonNullable<? extends String> rowVersion) {
        Utils.checkNotNull(rowVersion, "rowVersion");
        this.rowVersion = rowVersion;
        return this;
    }

    /**
     * Salutation of the contact person at the address
     */
    public Address withSalutation(String salutation) {
        Utils.checkNotNull(salutation, "salutation");
        this.salutation = JsonNullable.of(salutation);
        return this;
    }

    /**
     * Salutation of the contact person at the address
     */
    public Address withSalutation(JsonNullable<? extends String> salutation) {
        Utils.checkNotNull(salutation, "salutation");
        this.salutation = salutation;
        return this;
    }

    /**
     * Name of state
     */
    public Address withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = JsonNullable.of(state);
        return this;
    }

    /**
     * Name of state
     */
    public Address withState(JsonNullable<? extends String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * Street number
     */
    public Address withStreetNumber(String streetNumber) {
        Utils.checkNotNull(streetNumber, "streetNumber");
        this.streetNumber = JsonNullable.of(streetNumber);
        return this;
    }

    /**
     * Street number
     */
    public Address withStreetNumber(JsonNullable<? extends String> streetNumber) {
        Utils.checkNotNull(streetNumber, "streetNumber");
        this.streetNumber = streetNumber;
        return this;
    }

    /**
     * The address string. Some APIs don't provide structured address data.
     */
    public Address withString(String string) {
        Utils.checkNotNull(string, "string");
        this.string = JsonNullable.of(string);
        return this;
    }

    /**
     * The address string. Some APIs don't provide structured address data.
     */
    public Address withString(JsonNullable<? extends String> string) {
        Utils.checkNotNull(string, "string");
        this.string = string;
        return this;
    }

    /**
     * The type of address.
     */
    public Address withType(Type type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * The type of address.
     */
    public Address withType(JsonNullable<? extends Type> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Website of the address
     */
    public Address withWebsite(String website) {
        Utils.checkNotNull(website, "website");
        this.website = JsonNullable.of(website);
        return this;
    }

    /**
     * Website of the address
     */
    public Address withWebsite(JsonNullable<? extends String> website) {
        Utils.checkNotNull(website, "website");
        this.website = website;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Address other = (Address) o;
        return 
            java.util.Objects.deepEquals(this.city, other.city) &&
            java.util.Objects.deepEquals(this.contactName, other.contactName) &&
            java.util.Objects.deepEquals(this.country, other.country) &&
            java.util.Objects.deepEquals(this.county, other.county) &&
            java.util.Objects.deepEquals(this.email, other.email) &&
            java.util.Objects.deepEquals(this.fax, other.fax) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.latitude, other.latitude) &&
            java.util.Objects.deepEquals(this.line1, other.line1) &&
            java.util.Objects.deepEquals(this.line2, other.line2) &&
            java.util.Objects.deepEquals(this.line3, other.line3) &&
            java.util.Objects.deepEquals(this.line4, other.line4) &&
            java.util.Objects.deepEquals(this.longitude, other.longitude) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.notes, other.notes) &&
            java.util.Objects.deepEquals(this.phoneNumber, other.phoneNumber) &&
            java.util.Objects.deepEquals(this.postalCode, other.postalCode) &&
            java.util.Objects.deepEquals(this.rowVersion, other.rowVersion) &&
            java.util.Objects.deepEquals(this.salutation, other.salutation) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.streetNumber, other.streetNumber) &&
            java.util.Objects.deepEquals(this.string, other.string) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.website, other.website);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            city,
            contactName,
            country,
            county,
            email,
            fax,
            id,
            latitude,
            line1,
            line2,
            line3,
            line4,
            longitude,
            name,
            notes,
            phoneNumber,
            postalCode,
            rowVersion,
            salutation,
            state,
            streetNumber,
            string,
            type,
            website);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Address.class,
                "city", city,
                "contactName", contactName,
                "country", country,
                "county", county,
                "email", email,
                "fax", fax,
                "id", id,
                "latitude", latitude,
                "line1", line1,
                "line2", line2,
                "line3", line3,
                "line4", line4,
                "longitude", longitude,
                "name", name,
                "notes", notes,
                "phoneNumber", phoneNumber,
                "postalCode", postalCode,
                "rowVersion", rowVersion,
                "salutation", salutation,
                "state", state,
                "streetNumber", streetNumber,
                "string", string,
                "type", type,
                "website", website);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends String> city = JsonNullable.undefined();
 
        private JsonNullable<? extends String> contactName = JsonNullable.undefined();
 
        private JsonNullable<? extends String> country = JsonNullable.undefined();
 
        private JsonNullable<? extends String> county = JsonNullable.undefined();
 
        private JsonNullable<? extends String> email = JsonNullable.undefined();
 
        private JsonNullable<? extends String> fax = JsonNullable.undefined();
 
        private JsonNullable<? extends String> id = JsonNullable.undefined();
 
        private JsonNullable<? extends String> latitude = JsonNullable.undefined();
 
        private JsonNullable<? extends String> line1 = JsonNullable.undefined();
 
        private JsonNullable<? extends String> line2 = JsonNullable.undefined();
 
        private JsonNullable<? extends String> line3 = JsonNullable.undefined();
 
        private JsonNullable<? extends String> line4 = JsonNullable.undefined();
 
        private JsonNullable<? extends String> longitude = JsonNullable.undefined();
 
        private JsonNullable<? extends String> name = JsonNullable.undefined();
 
        private JsonNullable<? extends String> notes = JsonNullable.undefined();
 
        private JsonNullable<? extends String> phoneNumber = JsonNullable.undefined();
 
        private JsonNullable<? extends String> postalCode = JsonNullable.undefined();
 
        private JsonNullable<? extends String> rowVersion = JsonNullable.undefined();
 
        private JsonNullable<? extends String> salutation = JsonNullable.undefined();
 
        private JsonNullable<? extends String> state = JsonNullable.undefined();
 
        private JsonNullable<? extends String> streetNumber = JsonNullable.undefined();
 
        private JsonNullable<? extends String> string = JsonNullable.undefined();
 
        private JsonNullable<? extends Type> type = JsonNullable.undefined();
 
        private JsonNullable<? extends String> website = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of city.
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = JsonNullable.of(city);
            return this;
        }

        /**
         * Name of city.
         */
        public Builder city(JsonNullable<? extends String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        /**
         * Name of the contact person at the address
         */
        public Builder contactName(String contactName) {
            Utils.checkNotNull(contactName, "contactName");
            this.contactName = JsonNullable.of(contactName);
            return this;
        }

        /**
         * Name of the contact person at the address
         */
        public Builder contactName(JsonNullable<? extends String> contactName) {
            Utils.checkNotNull(contactName, "contactName");
            this.contactName = contactName;
            return this;
        }

        /**
         * country code according to ISO 3166-1 alpha-2.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * country code according to ISO 3166-1 alpha-2.
         */
        public Builder country(JsonNullable<? extends String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * Address field that holds a sublocality, such as a county
         */
        public Builder county(String county) {
            Utils.checkNotNull(county, "county");
            this.county = JsonNullable.of(county);
            return this;
        }

        /**
         * Address field that holds a sublocality, such as a county
         */
        public Builder county(JsonNullable<? extends String> county) {
            Utils.checkNotNull(county, "county");
            this.county = county;
            return this;
        }

        /**
         * Email address of the address
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = JsonNullable.of(email);
            return this;
        }

        /**
         * Email address of the address
         */
        public Builder email(JsonNullable<? extends String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * Fax number of the address
         */
        public Builder fax(String fax) {
            Utils.checkNotNull(fax, "fax");
            this.fax = JsonNullable.of(fax);
            return this;
        }

        /**
         * Fax number of the address
         */
        public Builder fax(JsonNullable<? extends String> fax) {
            Utils.checkNotNull(fax, "fax");
            this.fax = fax;
            return this;
        }

        /**
         * Unique identifier for the address.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Unique identifier for the address.
         */
        public Builder id(JsonNullable<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Latitude of the address
         */
        public Builder latitude(String latitude) {
            Utils.checkNotNull(latitude, "latitude");
            this.latitude = JsonNullable.of(latitude);
            return this;
        }

        /**
         * Latitude of the address
         */
        public Builder latitude(JsonNullable<? extends String> latitude) {
            Utils.checkNotNull(latitude, "latitude");
            this.latitude = latitude;
            return this;
        }

        /**
         * Line 1 of the address e.g. number, street, suite, apt #, etc.
         */
        public Builder line1(String line1) {
            Utils.checkNotNull(line1, "line1");
            this.line1 = JsonNullable.of(line1);
            return this;
        }

        /**
         * Line 1 of the address e.g. number, street, suite, apt #, etc.
         */
        public Builder line1(JsonNullable<? extends String> line1) {
            Utils.checkNotNull(line1, "line1");
            this.line1 = line1;
            return this;
        }

        /**
         * Line 2 of the address
         */
        public Builder line2(String line2) {
            Utils.checkNotNull(line2, "line2");
            this.line2 = JsonNullable.of(line2);
            return this;
        }

        /**
         * Line 2 of the address
         */
        public Builder line2(JsonNullable<? extends String> line2) {
            Utils.checkNotNull(line2, "line2");
            this.line2 = line2;
            return this;
        }

        /**
         * Line 3 of the address
         */
        public Builder line3(String line3) {
            Utils.checkNotNull(line3, "line3");
            this.line3 = JsonNullable.of(line3);
            return this;
        }

        /**
         * Line 3 of the address
         */
        public Builder line3(JsonNullable<? extends String> line3) {
            Utils.checkNotNull(line3, "line3");
            this.line3 = line3;
            return this;
        }

        /**
         * Line 4 of the address
         */
        public Builder line4(String line4) {
            Utils.checkNotNull(line4, "line4");
            this.line4 = JsonNullable.of(line4);
            return this;
        }

        /**
         * Line 4 of the address
         */
        public Builder line4(JsonNullable<? extends String> line4) {
            Utils.checkNotNull(line4, "line4");
            this.line4 = line4;
            return this;
        }

        /**
         * Longitude of the address
         */
        public Builder longitude(String longitude) {
            Utils.checkNotNull(longitude, "longitude");
            this.longitude = JsonNullable.of(longitude);
            return this;
        }

        /**
         * Longitude of the address
         */
        public Builder longitude(JsonNullable<? extends String> longitude) {
            Utils.checkNotNull(longitude, "longitude");
            this.longitude = longitude;
            return this;
        }

        /**
         * The name of the address.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The name of the address.
         */
        public Builder name(JsonNullable<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Additional notes
         */
        public Builder notes(String notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = JsonNullable.of(notes);
            return this;
        }

        /**
         * Additional notes
         */
        public Builder notes(JsonNullable<? extends String> notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = notes;
            return this;
        }

        /**
         * Phone number of the address
         */
        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = JsonNullable.of(phoneNumber);
            return this;
        }

        /**
         * Phone number of the address
         */
        public Builder phoneNumber(JsonNullable<? extends String> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * Zip code or equivalent.
         */
        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = JsonNullable.of(postalCode);
            return this;
        }

        /**
         * Zip code or equivalent.
         */
        public Builder postalCode(JsonNullable<? extends String> postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(String rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = JsonNullable.of(rowVersion);
            return this;
        }

        /**
         * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
         */
        public Builder rowVersion(JsonNullable<? extends String> rowVersion) {
            Utils.checkNotNull(rowVersion, "rowVersion");
            this.rowVersion = rowVersion;
            return this;
        }

        /**
         * Salutation of the contact person at the address
         */
        public Builder salutation(String salutation) {
            Utils.checkNotNull(salutation, "salutation");
            this.salutation = JsonNullable.of(salutation);
            return this;
        }

        /**
         * Salutation of the contact person at the address
         */
        public Builder salutation(JsonNullable<? extends String> salutation) {
            Utils.checkNotNull(salutation, "salutation");
            this.salutation = salutation;
            return this;
        }

        /**
         * Name of state
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = JsonNullable.of(state);
            return this;
        }

        /**
         * Name of state
         */
        public Builder state(JsonNullable<? extends String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * Street number
         */
        public Builder streetNumber(String streetNumber) {
            Utils.checkNotNull(streetNumber, "streetNumber");
            this.streetNumber = JsonNullable.of(streetNumber);
            return this;
        }

        /**
         * Street number
         */
        public Builder streetNumber(JsonNullable<? extends String> streetNumber) {
            Utils.checkNotNull(streetNumber, "streetNumber");
            this.streetNumber = streetNumber;
            return this;
        }

        /**
         * The address string. Some APIs don't provide structured address data.
         */
        public Builder string(String string) {
            Utils.checkNotNull(string, "string");
            this.string = JsonNullable.of(string);
            return this;
        }

        /**
         * The address string. Some APIs don't provide structured address data.
         */
        public Builder string(JsonNullable<? extends String> string) {
            Utils.checkNotNull(string, "string");
            this.string = string;
            return this;
        }

        /**
         * The type of address.
         */
        public Builder type(Type type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * The type of address.
         */
        public Builder type(JsonNullable<? extends Type> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * Website of the address
         */
        public Builder website(String website) {
            Utils.checkNotNull(website, "website");
            this.website = JsonNullable.of(website);
            return this;
        }

        /**
         * Website of the address
         */
        public Builder website(JsonNullable<? extends String> website) {
            Utils.checkNotNull(website, "website");
            this.website = website;
            return this;
        }
        
        public Address build() {
            return new Address(
                city,
                contactName,
                country,
                county,
                email,
                fax,
                id,
                latitude,
                line1,
                line2,
                line3,
                line4,
                longitude,
                name,
                notes,
                phoneNumber,
                postalCode,
                rowVersion,
                salutation,
                state,
                streetNumber,
                string,
                type,
                website);
        }
    }
}

