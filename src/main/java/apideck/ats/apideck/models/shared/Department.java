/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package apideck.ats.apideck.models.shared;

import apideck.ats.apideck.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Department {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private JsonNullable<? extends String> code;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<? extends OffsetDateTime> createdAt;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<? extends String> createdBy;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<? extends String> description;

    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * Department name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<? extends String> name;

    /**
     * Parent ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_id")
    private JsonNullable<? extends String> parentId;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<? extends OffsetDateTime> updatedAt;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<? extends String> updatedBy;

    public Department(
            @JsonProperty("code") JsonNullable<? extends String> code,
            @JsonProperty("created_at") JsonNullable<? extends OffsetDateTime> createdAt,
            @JsonProperty("created_by") JsonNullable<? extends String> createdBy,
            @JsonProperty("description") JsonNullable<? extends String> description,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("name") JsonNullable<? extends String> name,
            @JsonProperty("parent_id") JsonNullable<? extends String> parentId,
            @JsonProperty("updated_at") JsonNullable<? extends OffsetDateTime> updatedAt,
            @JsonProperty("updated_by") JsonNullable<? extends String> updatedBy) {
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(parentId, "parentId");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.code = code;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.description = description;
        this.id = id;
        this.name = name;
        this.parentId = parentId;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

    public JsonNullable<? extends String> code() {
        return code;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<? extends OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<? extends String> createdBy() {
        return createdBy;
    }

    public JsonNullable<? extends String> description() {
        return description;
    }

    /**
     * A unique identifier for an object.
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * Department name
     */
    public JsonNullable<? extends String> name() {
        return name;
    }

    /**
     * Parent ID
     */
    public JsonNullable<? extends String> parentId() {
        return parentId;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<? extends OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<? extends String> updatedBy() {
        return updatedBy;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Department withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = JsonNullable.of(code);
        return this;
    }

    public Department withCode(JsonNullable<? extends String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Department withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Department withCreatedAt(JsonNullable<? extends OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The user who created the object.
     */
    public Department withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }

    /**
     * The user who created the object.
     */
    public Department withCreatedBy(JsonNullable<? extends String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    public Department withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    public Department withDescription(JsonNullable<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public Department withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public Department withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Department name
     */
    public Department withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * Department name
     */
    public Department withName(JsonNullable<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Parent ID
     */
    public Department withParentId(String parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = JsonNullable.of(parentId);
        return this;
    }

    /**
     * Parent ID
     */
    public Department withParentId(JsonNullable<? extends String> parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = parentId;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Department withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Department withUpdatedAt(JsonNullable<? extends OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Department withUpdatedBy(String updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Department withUpdatedBy(JsonNullable<? extends String> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Department other = (Department) o;
        return 
            java.util.Objects.deepEquals(this.code, other.code) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.createdBy, other.createdBy) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.parentId, other.parentId) &&
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            java.util.Objects.deepEquals(this.updatedBy, other.updatedBy);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            code,
            createdAt,
            createdBy,
            description,
            id,
            name,
            parentId,
            updatedAt,
            updatedBy);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Department.class,
                "code", code,
                "createdAt", createdAt,
                "createdBy", createdBy,
                "description", description,
                "id", id,
                "name", name,
                "parentId", parentId,
                "updatedAt", updatedAt,
                "updatedBy", updatedBy);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends String> code = JsonNullable.undefined();
 
        private JsonNullable<? extends OffsetDateTime> createdAt = JsonNullable.undefined();
 
        private JsonNullable<? extends String> createdBy = JsonNullable.undefined();
 
        private JsonNullable<? extends String> description = JsonNullable.undefined();
 
        private Optional<? extends String> id = Optional.empty();
 
        private JsonNullable<? extends String> name = JsonNullable.undefined();
 
        private JsonNullable<? extends String> parentId = JsonNullable.undefined();
 
        private JsonNullable<? extends OffsetDateTime> updatedAt = JsonNullable.undefined();
 
        private JsonNullable<? extends String> updatedBy = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = JsonNullable.of(code);
            return this;
        }

        public Builder code(JsonNullable<? extends String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(JsonNullable<? extends OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(JsonNullable<? extends String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        public Builder description(JsonNullable<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Department name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * Department name
         */
        public Builder name(JsonNullable<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Parent ID
         */
        public Builder parentId(String parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = JsonNullable.of(parentId);
            return this;
        }

        /**
         * Parent ID
         */
        public Builder parentId(JsonNullable<? extends String> parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = parentId;
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<? extends OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(String updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(JsonNullable<? extends String> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }
        
        public Department build() {
            return new Department(
                code,
                createdAt,
                createdBy,
                description,
                id,
                name,
                parentId,
                updatedAt,
                updatedBy);
        }
    }
}

