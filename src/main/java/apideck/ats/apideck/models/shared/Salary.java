/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package apideck.ats.apideck.models.shared;

import apideck.ats.apideck.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Salary {

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends Currency> currency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interval")
    private JsonNullable<? extends String> interval;

    /**
     * Maximum salary payable for the job role.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max")
    private Optional<? extends Long> max;

    /**
     * Minimum salary payable for the job role.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("min")
    private Optional<? extends Long> min;

    public Salary(
            @JsonProperty("currency") JsonNullable<? extends Currency> currency,
            @JsonProperty("interval") JsonNullable<? extends String> interval,
            @JsonProperty("max") Optional<? extends Long> max,
            @JsonProperty("min") Optional<? extends Long> min) {
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(interval, "interval");
        Utils.checkNotNull(max, "max");
        Utils.checkNotNull(min, "min");
        this.currency = currency;
        this.interval = interval;
        this.max = max;
        this.min = min;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public JsonNullable<? extends Currency> currency() {
        return currency;
    }

    public JsonNullable<? extends String> interval() {
        return interval;
    }

    /**
     * Maximum salary payable for the job role.
     */
    public Optional<? extends Long> max() {
        return max;
    }

    /**
     * Minimum salary payable for the job role.
     */
    public Optional<? extends Long> min() {
        return min;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Salary withCurrency(Currency currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    public Salary withCurrency(JsonNullable<? extends Currency> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public Salary withInterval(String interval) {
        Utils.checkNotNull(interval, "interval");
        this.interval = JsonNullable.of(interval);
        return this;
    }

    public Salary withInterval(JsonNullable<? extends String> interval) {
        Utils.checkNotNull(interval, "interval");
        this.interval = interval;
        return this;
    }

    /**
     * Maximum salary payable for the job role.
     */
    public Salary withMax(long max) {
        Utils.checkNotNull(max, "max");
        this.max = Optional.ofNullable(max);
        return this;
    }

    /**
     * Maximum salary payable for the job role.
     */
    public Salary withMax(Optional<? extends Long> max) {
        Utils.checkNotNull(max, "max");
        this.max = max;
        return this;
    }

    /**
     * Minimum salary payable for the job role.
     */
    public Salary withMin(long min) {
        Utils.checkNotNull(min, "min");
        this.min = Optional.ofNullable(min);
        return this;
    }

    /**
     * Minimum salary payable for the job role.
     */
    public Salary withMin(Optional<? extends Long> min) {
        Utils.checkNotNull(min, "min");
        this.min = min;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Salary other = (Salary) o;
        return 
            java.util.Objects.deepEquals(this.currency, other.currency) &&
            java.util.Objects.deepEquals(this.interval, other.interval) &&
            java.util.Objects.deepEquals(this.max, other.max) &&
            java.util.Objects.deepEquals(this.min, other.min);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            currency,
            interval,
            max,
            min);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Salary.class,
                "currency", currency,
                "interval", interval,
                "max", max,
                "min", min);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends Currency> currency = JsonNullable.undefined();
 
        private JsonNullable<? extends String> interval = JsonNullable.undefined();
 
        private Optional<? extends Long> max = Optional.empty();
 
        private Optional<? extends Long> min = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(Currency currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
         */
        public Builder currency(JsonNullable<? extends Currency> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder interval(String interval) {
            Utils.checkNotNull(interval, "interval");
            this.interval = JsonNullable.of(interval);
            return this;
        }

        public Builder interval(JsonNullable<? extends String> interval) {
            Utils.checkNotNull(interval, "interval");
            this.interval = interval;
            return this;
        }

        /**
         * Maximum salary payable for the job role.
         */
        public Builder max(long max) {
            Utils.checkNotNull(max, "max");
            this.max = Optional.ofNullable(max);
            return this;
        }

        /**
         * Maximum salary payable for the job role.
         */
        public Builder max(Optional<? extends Long> max) {
            Utils.checkNotNull(max, "max");
            this.max = max;
            return this;
        }

        /**
         * Minimum salary payable for the job role.
         */
        public Builder min(long min) {
            Utils.checkNotNull(min, "min");
            this.min = Optional.ofNullable(min);
            return this;
        }

        /**
         * Minimum salary payable for the job role.
         */
        public Builder min(Optional<? extends Long> min) {
            Utils.checkNotNull(min, "min");
            this.min = min;
            return this;
        }
        
        public Salary build() {
            return new Salary(
                currency,
                interval,
                max,
                min);
        }
    }
}

