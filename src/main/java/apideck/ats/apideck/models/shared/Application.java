/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package apideck.ats.apideck.models.shared;

import apideck.ats.apideck.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Application {

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("applicant_id")
    private Optional<? extends String> applicantId;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<? extends OffsetDateTime> createdAt;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<? extends String> createdBy;

    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("job_id")
    private Optional<? extends String> jobId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stage")
    private Optional<? extends Stage> stage;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends Status> status;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<? extends OffsetDateTime> updatedAt;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<? extends String> updatedBy;

    public Application(
            @JsonProperty("applicant_id") Optional<? extends String> applicantId,
            @JsonProperty("created_at") JsonNullable<? extends OffsetDateTime> createdAt,
            @JsonProperty("created_by") JsonNullable<? extends String> createdBy,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("job_id") Optional<? extends String> jobId,
            @JsonProperty("stage") Optional<? extends Stage> stage,
            @JsonProperty("status") JsonNullable<? extends Status> status,
            @JsonProperty("updated_at") JsonNullable<? extends OffsetDateTime> updatedAt,
            @JsonProperty("updated_by") JsonNullable<? extends String> updatedBy) {
        Utils.checkNotNull(applicantId, "applicantId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(jobId, "jobId");
        Utils.checkNotNull(stage, "stage");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.applicantId = applicantId;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.id = id;
        this.jobId = jobId;
        this.stage = stage;
        this.status = status;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

    public Optional<? extends String> applicantId() {
        return applicantId;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<? extends OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<? extends String> createdBy() {
        return createdBy;
    }

    /**
     * A unique identifier for an object.
     */
    public Optional<? extends String> id() {
        return id;
    }

    public Optional<? extends String> jobId() {
        return jobId;
    }

    public Optional<? extends Stage> stage() {
        return stage;
    }

    public JsonNullable<? extends Status> status() {
        return status;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<? extends OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<? extends String> updatedBy() {
        return updatedBy;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Application withApplicantId(String applicantId) {
        Utils.checkNotNull(applicantId, "applicantId");
        this.applicantId = Optional.ofNullable(applicantId);
        return this;
    }

    public Application withApplicantId(Optional<? extends String> applicantId) {
        Utils.checkNotNull(applicantId, "applicantId");
        this.applicantId = applicantId;
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Application withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Application withCreatedAt(JsonNullable<? extends OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The user who created the object.
     */
    public Application withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }

    /**
     * The user who created the object.
     */
    public Application withCreatedBy(JsonNullable<? extends String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public Application withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public Application withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Application withJobId(String jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = Optional.ofNullable(jobId);
        return this;
    }

    public Application withJobId(Optional<? extends String> jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = jobId;
        return this;
    }

    public Application withStage(Stage stage) {
        Utils.checkNotNull(stage, "stage");
        this.stage = Optional.ofNullable(stage);
        return this;
    }

    public Application withStage(Optional<? extends Stage> stage) {
        Utils.checkNotNull(stage, "stage");
        this.stage = stage;
        return this;
    }

    public Application withStatus(Status status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    public Application withStatus(JsonNullable<? extends Status> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Application withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Application withUpdatedAt(JsonNullable<? extends OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Application withUpdatedBy(String updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Application withUpdatedBy(JsonNullable<? extends String> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Application other = (Application) o;
        return 
            java.util.Objects.deepEquals(this.applicantId, other.applicantId) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.createdBy, other.createdBy) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.jobId, other.jobId) &&
            java.util.Objects.deepEquals(this.stage, other.stage) &&
            java.util.Objects.deepEquals(this.status, other.status) &&
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            java.util.Objects.deepEquals(this.updatedBy, other.updatedBy);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            applicantId,
            createdAt,
            createdBy,
            id,
            jobId,
            stage,
            status,
            updatedAt,
            updatedBy);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Application.class,
                "applicantId", applicantId,
                "createdAt", createdAt,
                "createdBy", createdBy,
                "id", id,
                "jobId", jobId,
                "stage", stage,
                "status", status,
                "updatedAt", updatedAt,
                "updatedBy", updatedBy);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> applicantId = Optional.empty();
 
        private JsonNullable<? extends OffsetDateTime> createdAt = JsonNullable.undefined();
 
        private JsonNullable<? extends String> createdBy = JsonNullable.undefined();
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends String> jobId = Optional.empty();
 
        private Optional<? extends Stage> stage = Optional.empty();
 
        private JsonNullable<? extends Status> status = JsonNullable.undefined();
 
        private JsonNullable<? extends OffsetDateTime> updatedAt = JsonNullable.undefined();
 
        private JsonNullable<? extends String> updatedBy = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder applicantId(String applicantId) {
            Utils.checkNotNull(applicantId, "applicantId");
            this.applicantId = Optional.ofNullable(applicantId);
            return this;
        }

        public Builder applicantId(Optional<? extends String> applicantId) {
            Utils.checkNotNull(applicantId, "applicantId");
            this.applicantId = applicantId;
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(JsonNullable<? extends OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(JsonNullable<? extends String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder jobId(String jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = Optional.ofNullable(jobId);
            return this;
        }

        public Builder jobId(Optional<? extends String> jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = jobId;
            return this;
        }

        public Builder stage(Stage stage) {
            Utils.checkNotNull(stage, "stage");
            this.stage = Optional.ofNullable(stage);
            return this;
        }

        public Builder stage(Optional<? extends Stage> stage) {
            Utils.checkNotNull(stage, "stage");
            this.stage = stage;
            return this;
        }

        public Builder status(Status status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        public Builder status(JsonNullable<? extends Status> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<? extends OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(String updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(JsonNullable<? extends String> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }
        
        public Application build() {
            return new Application(
                applicantId,
                createdAt,
                createdBy,
                id,
                jobId,
                stage,
                status,
                updatedAt,
                updatedBy);
        }
    }
}

