/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package apideck.ats.apideck.models.shared;

import apideck.ats.apideck.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Applicant {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private Optional<? extends java.util.List<Address>> addresses;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anonymized")
    private Optional<? extends Boolean> anonymized;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application_ids")
    private JsonNullable<? extends java.util.List<String>> applicationIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applications")
    private JsonNullable<? extends java.util.List<String>> applications;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archived")
    private JsonNullable<? extends Boolean> archived;

    /**
     * The date of birth of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthday")
    private JsonNullable<? extends LocalDate> birthday;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("confidential")
    private Optional<? extends Boolean> confidential;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coordinator_id")
    private Optional<? extends String> coordinatorId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cover_letter")
    private Optional<? extends String> coverLetter;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<? extends OffsetDateTime> createdAt;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<? extends String> createdBy;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends java.util.List<CustomField>> customFields;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cv_url")
    private Optional<? extends String> cvUrl;

    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    private JsonNullable<? extends Boolean> deleted;

    /**
     * The time at which the object was deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted_at")
    private JsonNullable<? extends OffsetDateTime> deletedAt;

    /**
     * The user who deleted the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted_by")
    private JsonNullable<? extends String> deletedBy;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private Optional<? extends java.util.List<Email>> emails;

    /**
     * The first name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<? extends String> firstName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followers")
    private JsonNullable<? extends java.util.List<String>> followers;

    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("headline")
    private Optional<? extends String> headline;

    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initials")
    private JsonNullable<? extends String> initials;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_url")
    private JsonNullable<? extends String> jobUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_interaction_at")
    private JsonNullable<? extends OffsetDateTime> lastInteractionAt;

    /**
     * The last name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<? extends String> lastName;

    /**
     * Middle name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middle_name")
    private JsonNullable<? extends String> middleName;

    /**
     * The name of an applicant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<? extends String> ownerId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private Optional<? extends java.util.List<PhoneNumber>> phoneNumbers;

    /**
     * The URL of the photo of a person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photo_url")
    private JsonNullable<? extends String> photoUrl;

    /**
     * The PositionId the applicant applied for.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("position_id")
    private Optional<? extends String> positionId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_url")
    private JsonNullable<? extends String> recordUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recruiter_id")
    private Optional<? extends String> recruiterId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rejected_at")
    private JsonNullable<? extends OffsetDateTime> rejectedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("social_links")
    private Optional<? extends java.util.List<SocialLinks>> socialLinks;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_id")
    private Optional<? extends String> sourceId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourced_by")
    private JsonNullable<? extends String> sourcedBy;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sources")
    private JsonNullable<? extends java.util.List<String>> sources;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stage_id")
    private Optional<? extends String> stageId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private JsonNullable<? extends java.util.List<String>> tags;

    /**
     * The job title of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<? extends String> title;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<? extends OffsetDateTime> updatedAt;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<? extends String> updatedBy;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websites")
    private Optional<? extends java.util.List<Websites>> websites;

    public Applicant(
            @JsonProperty("addresses") Optional<? extends java.util.List<Address>> addresses,
            @JsonProperty("anonymized") Optional<? extends Boolean> anonymized,
            @JsonProperty("application_ids") JsonNullable<? extends java.util.List<String>> applicationIds,
            @JsonProperty("applications") JsonNullable<? extends java.util.List<String>> applications,
            @JsonProperty("archived") JsonNullable<? extends Boolean> archived,
            @JsonProperty("birthday") JsonNullable<? extends LocalDate> birthday,
            @JsonProperty("confidential") Optional<? extends Boolean> confidential,
            @JsonProperty("coordinator_id") Optional<? extends String> coordinatorId,
            @JsonProperty("cover_letter") Optional<? extends String> coverLetter,
            @JsonProperty("created_at") JsonNullable<? extends OffsetDateTime> createdAt,
            @JsonProperty("created_by") JsonNullable<? extends String> createdBy,
            @JsonProperty("custom_fields") Optional<? extends java.util.List<CustomField>> customFields,
            @JsonProperty("cv_url") Optional<? extends String> cvUrl,
            @JsonProperty("deleted") JsonNullable<? extends Boolean> deleted,
            @JsonProperty("deleted_at") JsonNullable<? extends OffsetDateTime> deletedAt,
            @JsonProperty("deleted_by") JsonNullable<? extends String> deletedBy,
            @JsonProperty("emails") Optional<? extends java.util.List<Email>> emails,
            @JsonProperty("first_name") JsonNullable<? extends String> firstName,
            @JsonProperty("followers") JsonNullable<? extends java.util.List<String>> followers,
            @JsonProperty("headline") Optional<? extends String> headline,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("initials") JsonNullable<? extends String> initials,
            @JsonProperty("job_url") JsonNullable<? extends String> jobUrl,
            @JsonProperty("last_interaction_at") JsonNullable<? extends OffsetDateTime> lastInteractionAt,
            @JsonProperty("last_name") JsonNullable<? extends String> lastName,
            @JsonProperty("middle_name") JsonNullable<? extends String> middleName,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("owner_id") JsonNullable<? extends String> ownerId,
            @JsonProperty("phone_numbers") Optional<? extends java.util.List<PhoneNumber>> phoneNumbers,
            @JsonProperty("photo_url") JsonNullable<? extends String> photoUrl,
            @JsonProperty("position_id") Optional<? extends String> positionId,
            @JsonProperty("record_url") JsonNullable<? extends String> recordUrl,
            @JsonProperty("recruiter_id") Optional<? extends String> recruiterId,
            @JsonProperty("rejected_at") JsonNullable<? extends OffsetDateTime> rejectedAt,
            @JsonProperty("social_links") Optional<? extends java.util.List<SocialLinks>> socialLinks,
            @JsonProperty("source_id") Optional<? extends String> sourceId,
            @JsonProperty("sourced_by") JsonNullable<? extends String> sourcedBy,
            @JsonProperty("sources") JsonNullable<? extends java.util.List<String>> sources,
            @JsonProperty("stage_id") Optional<? extends String> stageId,
            @JsonProperty("tags") JsonNullable<? extends java.util.List<String>> tags,
            @JsonProperty("title") JsonNullable<? extends String> title,
            @JsonProperty("updated_at") JsonNullable<? extends OffsetDateTime> updatedAt,
            @JsonProperty("updated_by") JsonNullable<? extends String> updatedBy,
            @JsonProperty("websites") Optional<? extends java.util.List<Websites>> websites) {
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(anonymized, "anonymized");
        Utils.checkNotNull(applicationIds, "applicationIds");
        Utils.checkNotNull(applications, "applications");
        Utils.checkNotNull(archived, "archived");
        Utils.checkNotNull(birthday, "birthday");
        Utils.checkNotNull(confidential, "confidential");
        Utils.checkNotNull(coordinatorId, "coordinatorId");
        Utils.checkNotNull(coverLetter, "coverLetter");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(cvUrl, "cvUrl");
        Utils.checkNotNull(deleted, "deleted");
        Utils.checkNotNull(deletedAt, "deletedAt");
        Utils.checkNotNull(deletedBy, "deletedBy");
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(followers, "followers");
        Utils.checkNotNull(headline, "headline");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(initials, "initials");
        Utils.checkNotNull(jobUrl, "jobUrl");
        Utils.checkNotNull(lastInteractionAt, "lastInteractionAt");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(middleName, "middleName");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(ownerId, "ownerId");
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        Utils.checkNotNull(photoUrl, "photoUrl");
        Utils.checkNotNull(positionId, "positionId");
        Utils.checkNotNull(recordUrl, "recordUrl");
        Utils.checkNotNull(recruiterId, "recruiterId");
        Utils.checkNotNull(rejectedAt, "rejectedAt");
        Utils.checkNotNull(socialLinks, "socialLinks");
        Utils.checkNotNull(sourceId, "sourceId");
        Utils.checkNotNull(sourcedBy, "sourcedBy");
        Utils.checkNotNull(sources, "sources");
        Utils.checkNotNull(stageId, "stageId");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(websites, "websites");
        this.addresses = addresses;
        this.anonymized = anonymized;
        this.applicationIds = applicationIds;
        this.applications = applications;
        this.archived = archived;
        this.birthday = birthday;
        this.confidential = confidential;
        this.coordinatorId = coordinatorId;
        this.coverLetter = coverLetter;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.customFields = customFields;
        this.cvUrl = cvUrl;
        this.deleted = deleted;
        this.deletedAt = deletedAt;
        this.deletedBy = deletedBy;
        this.emails = emails;
        this.firstName = firstName;
        this.followers = followers;
        this.headline = headline;
        this.id = id;
        this.initials = initials;
        this.jobUrl = jobUrl;
        this.lastInteractionAt = lastInteractionAt;
        this.lastName = lastName;
        this.middleName = middleName;
        this.name = name;
        this.ownerId = ownerId;
        this.phoneNumbers = phoneNumbers;
        this.photoUrl = photoUrl;
        this.positionId = positionId;
        this.recordUrl = recordUrl;
        this.recruiterId = recruiterId;
        this.rejectedAt = rejectedAt;
        this.socialLinks = socialLinks;
        this.sourceId = sourceId;
        this.sourcedBy = sourcedBy;
        this.sources = sources;
        this.stageId = stageId;
        this.tags = tags;
        this.title = title;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
        this.websites = websites;
    }

    public Optional<? extends java.util.List<Address>> addresses() {
        return addresses;
    }

    public Optional<? extends Boolean> anonymized() {
        return anonymized;
    }

    public JsonNullable<? extends java.util.List<String>> applicationIds() {
        return applicationIds;
    }

    public JsonNullable<? extends java.util.List<String>> applications() {
        return applications;
    }

    public JsonNullable<? extends Boolean> archived() {
        return archived;
    }

    /**
     * The date of birth of the person.
     */
    public JsonNullable<? extends LocalDate> birthday() {
        return birthday;
    }

    public Optional<? extends Boolean> confidential() {
        return confidential;
    }

    public Optional<? extends String> coordinatorId() {
        return coordinatorId;
    }

    public Optional<? extends String> coverLetter() {
        return coverLetter;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<? extends OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<? extends String> createdBy() {
        return createdBy;
    }

    public Optional<? extends java.util.List<CustomField>> customFields() {
        return customFields;
    }

    public Optional<? extends String> cvUrl() {
        return cvUrl;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public JsonNullable<? extends Boolean> deleted() {
        return deleted;
    }

    /**
     * The time at which the object was deleted.
     */
    public JsonNullable<? extends OffsetDateTime> deletedAt() {
        return deletedAt;
    }

    /**
     * The user who deleted the object.
     */
    public JsonNullable<? extends String> deletedBy() {
        return deletedBy;
    }

    public Optional<? extends java.util.List<Email>> emails() {
        return emails;
    }

    /**
     * The first name of the person.
     */
    public JsonNullable<? extends String> firstName() {
        return firstName;
    }

    public JsonNullable<? extends java.util.List<String>> followers() {
        return followers;
    }

    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    public Optional<? extends String> headline() {
        return headline;
    }

    /**
     * A unique identifier for an object.
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    public JsonNullable<? extends String> initials() {
        return initials;
    }

    public JsonNullable<? extends String> jobUrl() {
        return jobUrl;
    }

    public JsonNullable<? extends OffsetDateTime> lastInteractionAt() {
        return lastInteractionAt;
    }

    /**
     * The last name of the person.
     */
    public JsonNullable<? extends String> lastName() {
        return lastName;
    }

    /**
     * Middle name of the person.
     */
    public JsonNullable<? extends String> middleName() {
        return middleName;
    }

    /**
     * The name of an applicant.
     */
    public Optional<? extends String> name() {
        return name;
    }

    public JsonNullable<? extends String> ownerId() {
        return ownerId;
    }

    public Optional<? extends java.util.List<PhoneNumber>> phoneNumbers() {
        return phoneNumbers;
    }

    /**
     * The URL of the photo of a person.
     */
    public JsonNullable<? extends String> photoUrl() {
        return photoUrl;
    }

    /**
     * The PositionId the applicant applied for.
     */
    public Optional<? extends String> positionId() {
        return positionId;
    }

    public JsonNullable<? extends String> recordUrl() {
        return recordUrl;
    }

    public Optional<? extends String> recruiterId() {
        return recruiterId;
    }

    public JsonNullable<? extends OffsetDateTime> rejectedAt() {
        return rejectedAt;
    }

    public Optional<? extends java.util.List<SocialLinks>> socialLinks() {
        return socialLinks;
    }

    public Optional<? extends String> sourceId() {
        return sourceId;
    }

    public JsonNullable<? extends String> sourcedBy() {
        return sourcedBy;
    }

    public JsonNullable<? extends java.util.List<String>> sources() {
        return sources;
    }

    public Optional<? extends String> stageId() {
        return stageId;
    }

    public JsonNullable<? extends java.util.List<String>> tags() {
        return tags;
    }

    /**
     * The job title of the person.
     */
    public JsonNullable<? extends String> title() {
        return title;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<? extends OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<? extends String> updatedBy() {
        return updatedBy;
    }

    public Optional<? extends java.util.List<Websites>> websites() {
        return websites;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Applicant withAddresses(java.util.List<Address> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = Optional.ofNullable(addresses);
        return this;
    }

    public Applicant withAddresses(Optional<? extends java.util.List<Address>> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    public Applicant withAnonymized(boolean anonymized) {
        Utils.checkNotNull(anonymized, "anonymized");
        this.anonymized = Optional.ofNullable(anonymized);
        return this;
    }

    public Applicant withAnonymized(Optional<? extends Boolean> anonymized) {
        Utils.checkNotNull(anonymized, "anonymized");
        this.anonymized = anonymized;
        return this;
    }

    public Applicant withApplicationIds(java.util.List<String> applicationIds) {
        Utils.checkNotNull(applicationIds, "applicationIds");
        this.applicationIds = JsonNullable.of(applicationIds);
        return this;
    }

    public Applicant withApplicationIds(JsonNullable<? extends java.util.List<String>> applicationIds) {
        Utils.checkNotNull(applicationIds, "applicationIds");
        this.applicationIds = applicationIds;
        return this;
    }

    public Applicant withApplications(java.util.List<String> applications) {
        Utils.checkNotNull(applications, "applications");
        this.applications = JsonNullable.of(applications);
        return this;
    }

    public Applicant withApplications(JsonNullable<? extends java.util.List<String>> applications) {
        Utils.checkNotNull(applications, "applications");
        this.applications = applications;
        return this;
    }

    public Applicant withArchived(boolean archived) {
        Utils.checkNotNull(archived, "archived");
        this.archived = JsonNullable.of(archived);
        return this;
    }

    public Applicant withArchived(JsonNullable<? extends Boolean> archived) {
        Utils.checkNotNull(archived, "archived");
        this.archived = archived;
        return this;
    }

    /**
     * The date of birth of the person.
     */
    public Applicant withBirthday(LocalDate birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = JsonNullable.of(birthday);
        return this;
    }

    /**
     * The date of birth of the person.
     */
    public Applicant withBirthday(JsonNullable<? extends LocalDate> birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = birthday;
        return this;
    }

    public Applicant withConfidential(boolean confidential) {
        Utils.checkNotNull(confidential, "confidential");
        this.confidential = Optional.ofNullable(confidential);
        return this;
    }

    public Applicant withConfidential(Optional<? extends Boolean> confidential) {
        Utils.checkNotNull(confidential, "confidential");
        this.confidential = confidential;
        return this;
    }

    public Applicant withCoordinatorId(String coordinatorId) {
        Utils.checkNotNull(coordinatorId, "coordinatorId");
        this.coordinatorId = Optional.ofNullable(coordinatorId);
        return this;
    }

    public Applicant withCoordinatorId(Optional<? extends String> coordinatorId) {
        Utils.checkNotNull(coordinatorId, "coordinatorId");
        this.coordinatorId = coordinatorId;
        return this;
    }

    public Applicant withCoverLetter(String coverLetter) {
        Utils.checkNotNull(coverLetter, "coverLetter");
        this.coverLetter = Optional.ofNullable(coverLetter);
        return this;
    }

    public Applicant withCoverLetter(Optional<? extends String> coverLetter) {
        Utils.checkNotNull(coverLetter, "coverLetter");
        this.coverLetter = coverLetter;
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Applicant withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Applicant withCreatedAt(JsonNullable<? extends OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The user who created the object.
     */
    public Applicant withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }

    /**
     * The user who created the object.
     */
    public Applicant withCreatedBy(JsonNullable<? extends String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    public Applicant withCustomFields(java.util.List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }

    public Applicant withCustomFields(Optional<? extends java.util.List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    public Applicant withCvUrl(String cvUrl) {
        Utils.checkNotNull(cvUrl, "cvUrl");
        this.cvUrl = Optional.ofNullable(cvUrl);
        return this;
    }

    public Applicant withCvUrl(Optional<? extends String> cvUrl) {
        Utils.checkNotNull(cvUrl, "cvUrl");
        this.cvUrl = cvUrl;
        return this;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public Applicant withDeleted(boolean deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = JsonNullable.of(deleted);
        return this;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public Applicant withDeleted(JsonNullable<? extends Boolean> deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = deleted;
        return this;
    }

    /**
     * The time at which the object was deleted.
     */
    public Applicant withDeletedAt(OffsetDateTime deletedAt) {
        Utils.checkNotNull(deletedAt, "deletedAt");
        this.deletedAt = JsonNullable.of(deletedAt);
        return this;
    }

    /**
     * The time at which the object was deleted.
     */
    public Applicant withDeletedAt(JsonNullable<? extends OffsetDateTime> deletedAt) {
        Utils.checkNotNull(deletedAt, "deletedAt");
        this.deletedAt = deletedAt;
        return this;
    }

    /**
     * The user who deleted the object.
     */
    public Applicant withDeletedBy(String deletedBy) {
        Utils.checkNotNull(deletedBy, "deletedBy");
        this.deletedBy = JsonNullable.of(deletedBy);
        return this;
    }

    /**
     * The user who deleted the object.
     */
    public Applicant withDeletedBy(JsonNullable<? extends String> deletedBy) {
        Utils.checkNotNull(deletedBy, "deletedBy");
        this.deletedBy = deletedBy;
        return this;
    }

    public Applicant withEmails(java.util.List<Email> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }

    public Applicant withEmails(Optional<? extends java.util.List<Email>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    /**
     * The first name of the person.
     */
    public Applicant withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    /**
     * The first name of the person.
     */
    public Applicant withFirstName(JsonNullable<? extends String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    public Applicant withFollowers(java.util.List<String> followers) {
        Utils.checkNotNull(followers, "followers");
        this.followers = JsonNullable.of(followers);
        return this;
    }

    public Applicant withFollowers(JsonNullable<? extends java.util.List<String>> followers) {
        Utils.checkNotNull(followers, "followers");
        this.followers = followers;
        return this;
    }

    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    public Applicant withHeadline(String headline) {
        Utils.checkNotNull(headline, "headline");
        this.headline = Optional.ofNullable(headline);
        return this;
    }

    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    public Applicant withHeadline(Optional<? extends String> headline) {
        Utils.checkNotNull(headline, "headline");
        this.headline = headline;
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public Applicant withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public Applicant withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    public Applicant withInitials(String initials) {
        Utils.checkNotNull(initials, "initials");
        this.initials = JsonNullable.of(initials);
        return this;
    }

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    public Applicant withInitials(JsonNullable<? extends String> initials) {
        Utils.checkNotNull(initials, "initials");
        this.initials = initials;
        return this;
    }

    public Applicant withJobUrl(String jobUrl) {
        Utils.checkNotNull(jobUrl, "jobUrl");
        this.jobUrl = JsonNullable.of(jobUrl);
        return this;
    }

    public Applicant withJobUrl(JsonNullable<? extends String> jobUrl) {
        Utils.checkNotNull(jobUrl, "jobUrl");
        this.jobUrl = jobUrl;
        return this;
    }

    public Applicant withLastInteractionAt(OffsetDateTime lastInteractionAt) {
        Utils.checkNotNull(lastInteractionAt, "lastInteractionAt");
        this.lastInteractionAt = JsonNullable.of(lastInteractionAt);
        return this;
    }

    public Applicant withLastInteractionAt(JsonNullable<? extends OffsetDateTime> lastInteractionAt) {
        Utils.checkNotNull(lastInteractionAt, "lastInteractionAt");
        this.lastInteractionAt = lastInteractionAt;
        return this;
    }

    /**
     * The last name of the person.
     */
    public Applicant withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    /**
     * The last name of the person.
     */
    public Applicant withLastName(JsonNullable<? extends String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * Middle name of the person.
     */
    public Applicant withMiddleName(String middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = JsonNullable.of(middleName);
        return this;
    }

    /**
     * Middle name of the person.
     */
    public Applicant withMiddleName(JsonNullable<? extends String> middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = middleName;
        return this;
    }

    /**
     * The name of an applicant.
     */
    public Applicant withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of an applicant.
     */
    public Applicant withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public Applicant withOwnerId(String ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }

    public Applicant withOwnerId(JsonNullable<? extends String> ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = ownerId;
        return this;
    }

    public Applicant withPhoneNumbers(java.util.List<PhoneNumber> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = Optional.ofNullable(phoneNumbers);
        return this;
    }

    public Applicant withPhoneNumbers(Optional<? extends java.util.List<PhoneNumber>> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = phoneNumbers;
        return this;
    }

    /**
     * The URL of the photo of a person.
     */
    public Applicant withPhotoUrl(String photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = JsonNullable.of(photoUrl);
        return this;
    }

    /**
     * The URL of the photo of a person.
     */
    public Applicant withPhotoUrl(JsonNullable<? extends String> photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = photoUrl;
        return this;
    }

    /**
     * The PositionId the applicant applied for.
     */
    public Applicant withPositionId(String positionId) {
        Utils.checkNotNull(positionId, "positionId");
        this.positionId = Optional.ofNullable(positionId);
        return this;
    }

    /**
     * The PositionId the applicant applied for.
     */
    public Applicant withPositionId(Optional<? extends String> positionId) {
        Utils.checkNotNull(positionId, "positionId");
        this.positionId = positionId;
        return this;
    }

    public Applicant withRecordUrl(String recordUrl) {
        Utils.checkNotNull(recordUrl, "recordUrl");
        this.recordUrl = JsonNullable.of(recordUrl);
        return this;
    }

    public Applicant withRecordUrl(JsonNullable<? extends String> recordUrl) {
        Utils.checkNotNull(recordUrl, "recordUrl");
        this.recordUrl = recordUrl;
        return this;
    }

    public Applicant withRecruiterId(String recruiterId) {
        Utils.checkNotNull(recruiterId, "recruiterId");
        this.recruiterId = Optional.ofNullable(recruiterId);
        return this;
    }

    public Applicant withRecruiterId(Optional<? extends String> recruiterId) {
        Utils.checkNotNull(recruiterId, "recruiterId");
        this.recruiterId = recruiterId;
        return this;
    }

    public Applicant withRejectedAt(OffsetDateTime rejectedAt) {
        Utils.checkNotNull(rejectedAt, "rejectedAt");
        this.rejectedAt = JsonNullable.of(rejectedAt);
        return this;
    }

    public Applicant withRejectedAt(JsonNullable<? extends OffsetDateTime> rejectedAt) {
        Utils.checkNotNull(rejectedAt, "rejectedAt");
        this.rejectedAt = rejectedAt;
        return this;
    }

    public Applicant withSocialLinks(java.util.List<SocialLinks> socialLinks) {
        Utils.checkNotNull(socialLinks, "socialLinks");
        this.socialLinks = Optional.ofNullable(socialLinks);
        return this;
    }

    public Applicant withSocialLinks(Optional<? extends java.util.List<SocialLinks>> socialLinks) {
        Utils.checkNotNull(socialLinks, "socialLinks");
        this.socialLinks = socialLinks;
        return this;
    }

    public Applicant withSourceId(String sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = Optional.ofNullable(sourceId);
        return this;
    }

    public Applicant withSourceId(Optional<? extends String> sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = sourceId;
        return this;
    }

    public Applicant withSourcedBy(String sourcedBy) {
        Utils.checkNotNull(sourcedBy, "sourcedBy");
        this.sourcedBy = JsonNullable.of(sourcedBy);
        return this;
    }

    public Applicant withSourcedBy(JsonNullable<? extends String> sourcedBy) {
        Utils.checkNotNull(sourcedBy, "sourcedBy");
        this.sourcedBy = sourcedBy;
        return this;
    }

    public Applicant withSources(java.util.List<String> sources) {
        Utils.checkNotNull(sources, "sources");
        this.sources = JsonNullable.of(sources);
        return this;
    }

    public Applicant withSources(JsonNullable<? extends java.util.List<String>> sources) {
        Utils.checkNotNull(sources, "sources");
        this.sources = sources;
        return this;
    }

    public Applicant withStageId(String stageId) {
        Utils.checkNotNull(stageId, "stageId");
        this.stageId = Optional.ofNullable(stageId);
        return this;
    }

    public Applicant withStageId(Optional<? extends String> stageId) {
        Utils.checkNotNull(stageId, "stageId");
        this.stageId = stageId;
        return this;
    }

    public Applicant withTags(java.util.List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = JsonNullable.of(tags);
        return this;
    }

    public Applicant withTags(JsonNullable<? extends java.util.List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    /**
     * The job title of the person.
     */
    public Applicant withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    /**
     * The job title of the person.
     */
    public Applicant withTitle(JsonNullable<? extends String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Applicant withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Applicant withUpdatedAt(JsonNullable<? extends OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Applicant withUpdatedBy(String updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Applicant withUpdatedBy(JsonNullable<? extends String> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    public Applicant withWebsites(java.util.List<Websites> websites) {
        Utils.checkNotNull(websites, "websites");
        this.websites = Optional.ofNullable(websites);
        return this;
    }

    public Applicant withWebsites(Optional<? extends java.util.List<Websites>> websites) {
        Utils.checkNotNull(websites, "websites");
        this.websites = websites;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Applicant other = (Applicant) o;
        return 
            java.util.Objects.deepEquals(this.addresses, other.addresses) &&
            java.util.Objects.deepEquals(this.anonymized, other.anonymized) &&
            java.util.Objects.deepEquals(this.applicationIds, other.applicationIds) &&
            java.util.Objects.deepEquals(this.applications, other.applications) &&
            java.util.Objects.deepEquals(this.archived, other.archived) &&
            java.util.Objects.deepEquals(this.birthday, other.birthday) &&
            java.util.Objects.deepEquals(this.confidential, other.confidential) &&
            java.util.Objects.deepEquals(this.coordinatorId, other.coordinatorId) &&
            java.util.Objects.deepEquals(this.coverLetter, other.coverLetter) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.createdBy, other.createdBy) &&
            java.util.Objects.deepEquals(this.customFields, other.customFields) &&
            java.util.Objects.deepEquals(this.cvUrl, other.cvUrl) &&
            java.util.Objects.deepEquals(this.deleted, other.deleted) &&
            java.util.Objects.deepEquals(this.deletedAt, other.deletedAt) &&
            java.util.Objects.deepEquals(this.deletedBy, other.deletedBy) &&
            java.util.Objects.deepEquals(this.emails, other.emails) &&
            java.util.Objects.deepEquals(this.firstName, other.firstName) &&
            java.util.Objects.deepEquals(this.followers, other.followers) &&
            java.util.Objects.deepEquals(this.headline, other.headline) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.initials, other.initials) &&
            java.util.Objects.deepEquals(this.jobUrl, other.jobUrl) &&
            java.util.Objects.deepEquals(this.lastInteractionAt, other.lastInteractionAt) &&
            java.util.Objects.deepEquals(this.lastName, other.lastName) &&
            java.util.Objects.deepEquals(this.middleName, other.middleName) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.ownerId, other.ownerId) &&
            java.util.Objects.deepEquals(this.phoneNumbers, other.phoneNumbers) &&
            java.util.Objects.deepEquals(this.photoUrl, other.photoUrl) &&
            java.util.Objects.deepEquals(this.positionId, other.positionId) &&
            java.util.Objects.deepEquals(this.recordUrl, other.recordUrl) &&
            java.util.Objects.deepEquals(this.recruiterId, other.recruiterId) &&
            java.util.Objects.deepEquals(this.rejectedAt, other.rejectedAt) &&
            java.util.Objects.deepEquals(this.socialLinks, other.socialLinks) &&
            java.util.Objects.deepEquals(this.sourceId, other.sourceId) &&
            java.util.Objects.deepEquals(this.sourcedBy, other.sourcedBy) &&
            java.util.Objects.deepEquals(this.sources, other.sources) &&
            java.util.Objects.deepEquals(this.stageId, other.stageId) &&
            java.util.Objects.deepEquals(this.tags, other.tags) &&
            java.util.Objects.deepEquals(this.title, other.title) &&
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            java.util.Objects.deepEquals(this.updatedBy, other.updatedBy) &&
            java.util.Objects.deepEquals(this.websites, other.websites);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            addresses,
            anonymized,
            applicationIds,
            applications,
            archived,
            birthday,
            confidential,
            coordinatorId,
            coverLetter,
            createdAt,
            createdBy,
            customFields,
            cvUrl,
            deleted,
            deletedAt,
            deletedBy,
            emails,
            firstName,
            followers,
            headline,
            id,
            initials,
            jobUrl,
            lastInteractionAt,
            lastName,
            middleName,
            name,
            ownerId,
            phoneNumbers,
            photoUrl,
            positionId,
            recordUrl,
            recruiterId,
            rejectedAt,
            socialLinks,
            sourceId,
            sourcedBy,
            sources,
            stageId,
            tags,
            title,
            updatedAt,
            updatedBy,
            websites);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Applicant.class,
                "addresses", addresses,
                "anonymized", anonymized,
                "applicationIds", applicationIds,
                "applications", applications,
                "archived", archived,
                "birthday", birthday,
                "confidential", confidential,
                "coordinatorId", coordinatorId,
                "coverLetter", coverLetter,
                "createdAt", createdAt,
                "createdBy", createdBy,
                "customFields", customFields,
                "cvUrl", cvUrl,
                "deleted", deleted,
                "deletedAt", deletedAt,
                "deletedBy", deletedBy,
                "emails", emails,
                "firstName", firstName,
                "followers", followers,
                "headline", headline,
                "id", id,
                "initials", initials,
                "jobUrl", jobUrl,
                "lastInteractionAt", lastInteractionAt,
                "lastName", lastName,
                "middleName", middleName,
                "name", name,
                "ownerId", ownerId,
                "phoneNumbers", phoneNumbers,
                "photoUrl", photoUrl,
                "positionId", positionId,
                "recordUrl", recordUrl,
                "recruiterId", recruiterId,
                "rejectedAt", rejectedAt,
                "socialLinks", socialLinks,
                "sourceId", sourceId,
                "sourcedBy", sourcedBy,
                "sources", sources,
                "stageId", stageId,
                "tags", tags,
                "title", title,
                "updatedAt", updatedAt,
                "updatedBy", updatedBy,
                "websites", websites);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<Address>> addresses = Optional.empty();
 
        private Optional<? extends Boolean> anonymized = Optional.empty();
 
        private JsonNullable<? extends java.util.List<String>> applicationIds = JsonNullable.undefined();
 
        private JsonNullable<? extends java.util.List<String>> applications = JsonNullable.undefined();
 
        private JsonNullable<? extends Boolean> archived = JsonNullable.undefined();
 
        private JsonNullable<? extends LocalDate> birthday = JsonNullable.undefined();
 
        private Optional<? extends Boolean> confidential = Optional.empty();
 
        private Optional<? extends String> coordinatorId = Optional.empty();
 
        private Optional<? extends String> coverLetter = Optional.empty();
 
        private JsonNullable<? extends OffsetDateTime> createdAt = JsonNullable.undefined();
 
        private JsonNullable<? extends String> createdBy = JsonNullable.undefined();
 
        private Optional<? extends java.util.List<CustomField>> customFields = Optional.empty();
 
        private Optional<? extends String> cvUrl = Optional.empty();
 
        private JsonNullable<? extends Boolean> deleted = JsonNullable.undefined();
 
        private JsonNullable<? extends OffsetDateTime> deletedAt = JsonNullable.undefined();
 
        private JsonNullable<? extends String> deletedBy = JsonNullable.undefined();
 
        private Optional<? extends java.util.List<Email>> emails = Optional.empty();
 
        private JsonNullable<? extends String> firstName = JsonNullable.undefined();
 
        private JsonNullable<? extends java.util.List<String>> followers = JsonNullable.undefined();
 
        private Optional<? extends String> headline = Optional.empty();
 
        private Optional<? extends String> id = Optional.empty();
 
        private JsonNullable<? extends String> initials = JsonNullable.undefined();
 
        private JsonNullable<? extends String> jobUrl = JsonNullable.undefined();
 
        private JsonNullable<? extends OffsetDateTime> lastInteractionAt = JsonNullable.undefined();
 
        private JsonNullable<? extends String> lastName = JsonNullable.undefined();
 
        private JsonNullable<? extends String> middleName = JsonNullable.undefined();
 
        private Optional<? extends String> name = Optional.empty();
 
        private JsonNullable<? extends String> ownerId = JsonNullable.undefined();
 
        private Optional<? extends java.util.List<PhoneNumber>> phoneNumbers = Optional.empty();
 
        private JsonNullable<? extends String> photoUrl = JsonNullable.undefined();
 
        private Optional<? extends String> positionId = Optional.empty();
 
        private JsonNullable<? extends String> recordUrl = JsonNullable.undefined();
 
        private Optional<? extends String> recruiterId = Optional.empty();
 
        private JsonNullable<? extends OffsetDateTime> rejectedAt = JsonNullable.undefined();
 
        private Optional<? extends java.util.List<SocialLinks>> socialLinks = Optional.empty();
 
        private Optional<? extends String> sourceId = Optional.empty();
 
        private JsonNullable<? extends String> sourcedBy = JsonNullable.undefined();
 
        private JsonNullable<? extends java.util.List<String>> sources = JsonNullable.undefined();
 
        private Optional<? extends String> stageId = Optional.empty();
 
        private JsonNullable<? extends java.util.List<String>> tags = JsonNullable.undefined();
 
        private JsonNullable<? extends String> title = JsonNullable.undefined();
 
        private JsonNullable<? extends OffsetDateTime> updatedAt = JsonNullable.undefined();
 
        private JsonNullable<? extends String> updatedBy = JsonNullable.undefined();
 
        private Optional<? extends java.util.List<Websites>> websites = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder addresses(java.util.List<Address> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = Optional.ofNullable(addresses);
            return this;
        }

        public Builder addresses(Optional<? extends java.util.List<Address>> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }

        public Builder anonymized(boolean anonymized) {
            Utils.checkNotNull(anonymized, "anonymized");
            this.anonymized = Optional.ofNullable(anonymized);
            return this;
        }

        public Builder anonymized(Optional<? extends Boolean> anonymized) {
            Utils.checkNotNull(anonymized, "anonymized");
            this.anonymized = anonymized;
            return this;
        }

        public Builder applicationIds(java.util.List<String> applicationIds) {
            Utils.checkNotNull(applicationIds, "applicationIds");
            this.applicationIds = JsonNullable.of(applicationIds);
            return this;
        }

        public Builder applicationIds(JsonNullable<? extends java.util.List<String>> applicationIds) {
            Utils.checkNotNull(applicationIds, "applicationIds");
            this.applicationIds = applicationIds;
            return this;
        }

        public Builder applications(java.util.List<String> applications) {
            Utils.checkNotNull(applications, "applications");
            this.applications = JsonNullable.of(applications);
            return this;
        }

        public Builder applications(JsonNullable<? extends java.util.List<String>> applications) {
            Utils.checkNotNull(applications, "applications");
            this.applications = applications;
            return this;
        }

        public Builder archived(boolean archived) {
            Utils.checkNotNull(archived, "archived");
            this.archived = JsonNullable.of(archived);
            return this;
        }

        public Builder archived(JsonNullable<? extends Boolean> archived) {
            Utils.checkNotNull(archived, "archived");
            this.archived = archived;
            return this;
        }

        /**
         * The date of birth of the person.
         */
        public Builder birthday(LocalDate birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = JsonNullable.of(birthday);
            return this;
        }

        /**
         * The date of birth of the person.
         */
        public Builder birthday(JsonNullable<? extends LocalDate> birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = birthday;
            return this;
        }

        public Builder confidential(boolean confidential) {
            Utils.checkNotNull(confidential, "confidential");
            this.confidential = Optional.ofNullable(confidential);
            return this;
        }

        public Builder confidential(Optional<? extends Boolean> confidential) {
            Utils.checkNotNull(confidential, "confidential");
            this.confidential = confidential;
            return this;
        }

        public Builder coordinatorId(String coordinatorId) {
            Utils.checkNotNull(coordinatorId, "coordinatorId");
            this.coordinatorId = Optional.ofNullable(coordinatorId);
            return this;
        }

        public Builder coordinatorId(Optional<? extends String> coordinatorId) {
            Utils.checkNotNull(coordinatorId, "coordinatorId");
            this.coordinatorId = coordinatorId;
            return this;
        }

        public Builder coverLetter(String coverLetter) {
            Utils.checkNotNull(coverLetter, "coverLetter");
            this.coverLetter = Optional.ofNullable(coverLetter);
            return this;
        }

        public Builder coverLetter(Optional<? extends String> coverLetter) {
            Utils.checkNotNull(coverLetter, "coverLetter");
            this.coverLetter = coverLetter;
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(JsonNullable<? extends OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(JsonNullable<? extends String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        public Builder customFields(java.util.List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends java.util.List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }

        public Builder cvUrl(String cvUrl) {
            Utils.checkNotNull(cvUrl, "cvUrl");
            this.cvUrl = Optional.ofNullable(cvUrl);
            return this;
        }

        public Builder cvUrl(Optional<? extends String> cvUrl) {
            Utils.checkNotNull(cvUrl, "cvUrl");
            this.cvUrl = cvUrl;
            return this;
        }

        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(boolean deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = JsonNullable.of(deleted);
            return this;
        }

        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(JsonNullable<? extends Boolean> deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = deleted;
            return this;
        }

        /**
         * The time at which the object was deleted.
         */
        public Builder deletedAt(OffsetDateTime deletedAt) {
            Utils.checkNotNull(deletedAt, "deletedAt");
            this.deletedAt = JsonNullable.of(deletedAt);
            return this;
        }

        /**
         * The time at which the object was deleted.
         */
        public Builder deletedAt(JsonNullable<? extends OffsetDateTime> deletedAt) {
            Utils.checkNotNull(deletedAt, "deletedAt");
            this.deletedAt = deletedAt;
            return this;
        }

        /**
         * The user who deleted the object.
         */
        public Builder deletedBy(String deletedBy) {
            Utils.checkNotNull(deletedBy, "deletedBy");
            this.deletedBy = JsonNullable.of(deletedBy);
            return this;
        }

        /**
         * The user who deleted the object.
         */
        public Builder deletedBy(JsonNullable<? extends String> deletedBy) {
            Utils.checkNotNull(deletedBy, "deletedBy");
            this.deletedBy = deletedBy;
            return this;
        }

        public Builder emails(java.util.List<Email> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        public Builder emails(Optional<? extends java.util.List<Email>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }

        /**
         * The first name of the person.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The first name of the person.
         */
        public Builder firstName(JsonNullable<? extends String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        public Builder followers(java.util.List<String> followers) {
            Utils.checkNotNull(followers, "followers");
            this.followers = JsonNullable.of(followers);
            return this;
        }

        public Builder followers(JsonNullable<? extends java.util.List<String>> followers) {
            Utils.checkNotNull(followers, "followers");
            this.followers = followers;
            return this;
        }

        /**
         * Typically a list of previous companies where the contact has worked or schools that the contact has attended
         */
        public Builder headline(String headline) {
            Utils.checkNotNull(headline, "headline");
            this.headline = Optional.ofNullable(headline);
            return this;
        }

        /**
         * Typically a list of previous companies where the contact has worked or schools that the contact has attended
         */
        public Builder headline(Optional<? extends String> headline) {
            Utils.checkNotNull(headline, "headline");
            this.headline = headline;
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The initials of the person, usually derived from their first, middle, and last names.
         */
        public Builder initials(String initials) {
            Utils.checkNotNull(initials, "initials");
            this.initials = JsonNullable.of(initials);
            return this;
        }

        /**
         * The initials of the person, usually derived from their first, middle, and last names.
         */
        public Builder initials(JsonNullable<? extends String> initials) {
            Utils.checkNotNull(initials, "initials");
            this.initials = initials;
            return this;
        }

        public Builder jobUrl(String jobUrl) {
            Utils.checkNotNull(jobUrl, "jobUrl");
            this.jobUrl = JsonNullable.of(jobUrl);
            return this;
        }

        public Builder jobUrl(JsonNullable<? extends String> jobUrl) {
            Utils.checkNotNull(jobUrl, "jobUrl");
            this.jobUrl = jobUrl;
            return this;
        }

        public Builder lastInteractionAt(OffsetDateTime lastInteractionAt) {
            Utils.checkNotNull(lastInteractionAt, "lastInteractionAt");
            this.lastInteractionAt = JsonNullable.of(lastInteractionAt);
            return this;
        }

        public Builder lastInteractionAt(JsonNullable<? extends OffsetDateTime> lastInteractionAt) {
            Utils.checkNotNull(lastInteractionAt, "lastInteractionAt");
            this.lastInteractionAt = lastInteractionAt;
            return this;
        }

        /**
         * The last name of the person.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The last name of the person.
         */
        public Builder lastName(JsonNullable<? extends String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * Middle name of the person.
         */
        public Builder middleName(String middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = JsonNullable.of(middleName);
            return this;
        }

        /**
         * Middle name of the person.
         */
        public Builder middleName(JsonNullable<? extends String> middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = middleName;
            return this;
        }

        /**
         * The name of an applicant.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of an applicant.
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder ownerId(String ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        public Builder ownerId(JsonNullable<? extends String> ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = ownerId;
            return this;
        }

        public Builder phoneNumbers(java.util.List<PhoneNumber> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = Optional.ofNullable(phoneNumbers);
            return this;
        }

        public Builder phoneNumbers(Optional<? extends java.util.List<PhoneNumber>> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        /**
         * The URL of the photo of a person.
         */
        public Builder photoUrl(String photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = JsonNullable.of(photoUrl);
            return this;
        }

        /**
         * The URL of the photo of a person.
         */
        public Builder photoUrl(JsonNullable<? extends String> photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = photoUrl;
            return this;
        }

        /**
         * The PositionId the applicant applied for.
         */
        public Builder positionId(String positionId) {
            Utils.checkNotNull(positionId, "positionId");
            this.positionId = Optional.ofNullable(positionId);
            return this;
        }

        /**
         * The PositionId the applicant applied for.
         */
        public Builder positionId(Optional<? extends String> positionId) {
            Utils.checkNotNull(positionId, "positionId");
            this.positionId = positionId;
            return this;
        }

        public Builder recordUrl(String recordUrl) {
            Utils.checkNotNull(recordUrl, "recordUrl");
            this.recordUrl = JsonNullable.of(recordUrl);
            return this;
        }

        public Builder recordUrl(JsonNullable<? extends String> recordUrl) {
            Utils.checkNotNull(recordUrl, "recordUrl");
            this.recordUrl = recordUrl;
            return this;
        }

        public Builder recruiterId(String recruiterId) {
            Utils.checkNotNull(recruiterId, "recruiterId");
            this.recruiterId = Optional.ofNullable(recruiterId);
            return this;
        }

        public Builder recruiterId(Optional<? extends String> recruiterId) {
            Utils.checkNotNull(recruiterId, "recruiterId");
            this.recruiterId = recruiterId;
            return this;
        }

        public Builder rejectedAt(OffsetDateTime rejectedAt) {
            Utils.checkNotNull(rejectedAt, "rejectedAt");
            this.rejectedAt = JsonNullable.of(rejectedAt);
            return this;
        }

        public Builder rejectedAt(JsonNullable<? extends OffsetDateTime> rejectedAt) {
            Utils.checkNotNull(rejectedAt, "rejectedAt");
            this.rejectedAt = rejectedAt;
            return this;
        }

        public Builder socialLinks(java.util.List<SocialLinks> socialLinks) {
            Utils.checkNotNull(socialLinks, "socialLinks");
            this.socialLinks = Optional.ofNullable(socialLinks);
            return this;
        }

        public Builder socialLinks(Optional<? extends java.util.List<SocialLinks>> socialLinks) {
            Utils.checkNotNull(socialLinks, "socialLinks");
            this.socialLinks = socialLinks;
            return this;
        }

        public Builder sourceId(String sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = Optional.ofNullable(sourceId);
            return this;
        }

        public Builder sourceId(Optional<? extends String> sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = sourceId;
            return this;
        }

        public Builder sourcedBy(String sourcedBy) {
            Utils.checkNotNull(sourcedBy, "sourcedBy");
            this.sourcedBy = JsonNullable.of(sourcedBy);
            return this;
        }

        public Builder sourcedBy(JsonNullable<? extends String> sourcedBy) {
            Utils.checkNotNull(sourcedBy, "sourcedBy");
            this.sourcedBy = sourcedBy;
            return this;
        }

        public Builder sources(java.util.List<String> sources) {
            Utils.checkNotNull(sources, "sources");
            this.sources = JsonNullable.of(sources);
            return this;
        }

        public Builder sources(JsonNullable<? extends java.util.List<String>> sources) {
            Utils.checkNotNull(sources, "sources");
            this.sources = sources;
            return this;
        }

        public Builder stageId(String stageId) {
            Utils.checkNotNull(stageId, "stageId");
            this.stageId = Optional.ofNullable(stageId);
            return this;
        }

        public Builder stageId(Optional<? extends String> stageId) {
            Utils.checkNotNull(stageId, "stageId");
            this.stageId = stageId;
            return this;
        }

        public Builder tags(java.util.List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = JsonNullable.of(tags);
            return this;
        }

        public Builder tags(JsonNullable<? extends java.util.List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }

        /**
         * The job title of the person.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * The job title of the person.
         */
        public Builder title(JsonNullable<? extends String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<? extends OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(String updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(JsonNullable<? extends String> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }

        public Builder websites(java.util.List<Websites> websites) {
            Utils.checkNotNull(websites, "websites");
            this.websites = Optional.ofNullable(websites);
            return this;
        }

        public Builder websites(Optional<? extends java.util.List<Websites>> websites) {
            Utils.checkNotNull(websites, "websites");
            this.websites = websites;
            return this;
        }
        
        public Applicant build() {
            return new Applicant(
                addresses,
                anonymized,
                applicationIds,
                applications,
                archived,
                birthday,
                confidential,
                coordinatorId,
                coverLetter,
                createdAt,
                createdBy,
                customFields,
                cvUrl,
                deleted,
                deletedAt,
                deletedBy,
                emails,
                firstName,
                followers,
                headline,
                id,
                initials,
                jobUrl,
                lastInteractionAt,
                lastName,
                middleName,
                name,
                ownerId,
                phoneNumbers,
                photoUrl,
                positionId,
                recordUrl,
                recruiterId,
                rejectedAt,
                socialLinks,
                sourceId,
                sourcedBy,
                sources,
                stageId,
                tags,
                title,
                updatedAt,
                updatedBy,
                websites);
        }
    }
}

