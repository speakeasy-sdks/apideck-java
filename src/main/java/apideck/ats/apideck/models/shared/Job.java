/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package apideck.ats.apideck.models.shared;

import apideck.ats.apideck.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Job {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private Optional<? extends java.util.List<Address>> addresses;

    /**
     * Specifies whether an employee of the organization can apply for the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available_to_employees")
    private Optional<? extends Boolean> availableToEmployees;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blocks")
    private Optional<? extends java.util.List<Blocks>> blocks;

    /**
     * Details of the branch for which the job is created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("branch")
    private Optional<? extends Branch> branch;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closing")
    private JsonNullable<? extends String> closing;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closing_date")
    private JsonNullable<? extends LocalDate> closingDate;

    /**
     * The closing section of the job description in HTML format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closing_html")
    private JsonNullable<? extends String> closingHtml;

    /**
     * The code of the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<? extends String> code;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("confidential")
    private Optional<? extends Boolean> confidential;

    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private JsonNullable<? extends OffsetDateTime> createdAt;

    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<? extends String> createdBy;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends java.util.List<CustomField>> customFields;

    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    private JsonNullable<? extends Boolean> deleted;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    private Optional<? extends Department> department;

    /**
     * A description of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<? extends String> description;

    /**
     * The job description in HTML format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description_html")
    private JsonNullable<? extends String> descriptionHtml;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_terms")
    private JsonNullable<? extends EmploymentTerms> employmentTerms;

    /**
     * Level of experience required for the job role.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("experience")
    private Optional<? extends String> experience;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followers")
    private JsonNullable<? extends java.util.List<String>> followers;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hiring_managers")
    private Optional<? extends java.util.List<String>> hiringManagers;

    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * URL of the job portal
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_portal_url")
    @Deprecated
    private JsonNullable<? extends String> jobPortalUrl;

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    private JsonNullable<? extends String> language;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("links")
    private Optional<? extends java.util.List<JobLinks>> links;

    /**
     * Specifies the location for the job posting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    private JsonNullable<? extends String> location;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<? extends String> ownerId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("published_at")
    private JsonNullable<? extends OffsetDateTime> publishedAt;

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_url")
    @Deprecated
    private JsonNullable<? extends String> recordUrl;

    /**
     * The recruiter is generally someone who is tasked to help the hiring manager find and screen qualified applicant
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recruiters")
    private JsonNullable<? extends java.util.List<String>> recruiters;

    /**
     * Specifies whether the posting is for a remote job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote")
    private JsonNullable<? extends Boolean> remote;

    /**
     * A job's Requisition ID (Req ID) allows your organization to identify and track a job based on alphanumeric naming conventions unique to your company's internal processes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requisition_id")
    private Optional<? extends String> requisitionId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salary")
    private Optional<? extends Salary> salary;

    /**
     * Sequence in relation to other jobs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sequence")
    private Optional<? extends Long> sequence;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slug")
    private JsonNullable<? extends String> slug;

    /**
     * The status of the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends JobStatus> status;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private JsonNullable<? extends java.util.List<String>> tags;

    /**
     * The job title of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<? extends String> title;

    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private JsonNullable<? extends OffsetDateTime> updatedAt;

    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private JsonNullable<? extends String> updatedBy;

    /**
     * URL of the job description
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    @Deprecated
    private JsonNullable<? extends String> url;

    /**
     * The visibility of the job
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visibility")
    private Optional<? extends Visibility> visibility;

    public Job(
            @JsonProperty("addresses") Optional<? extends java.util.List<Address>> addresses,
            @JsonProperty("available_to_employees") Optional<? extends Boolean> availableToEmployees,
            @JsonProperty("blocks") Optional<? extends java.util.List<Blocks>> blocks,
            @JsonProperty("branch") Optional<? extends Branch> branch,
            @JsonProperty("closing") JsonNullable<? extends String> closing,
            @JsonProperty("closing_date") JsonNullable<? extends LocalDate> closingDate,
            @JsonProperty("closing_html") JsonNullable<? extends String> closingHtml,
            @JsonProperty("code") Optional<? extends String> code,
            @JsonProperty("confidential") Optional<? extends Boolean> confidential,
            @JsonProperty("created_at") JsonNullable<? extends OffsetDateTime> createdAt,
            @JsonProperty("created_by") JsonNullable<? extends String> createdBy,
            @JsonProperty("custom_fields") Optional<? extends java.util.List<CustomField>> customFields,
            @JsonProperty("deleted") JsonNullable<? extends Boolean> deleted,
            @JsonProperty("department") Optional<? extends Department> department,
            @JsonProperty("description") JsonNullable<? extends String> description,
            @JsonProperty("description_html") JsonNullable<? extends String> descriptionHtml,
            @JsonProperty("employment_terms") JsonNullable<? extends EmploymentTerms> employmentTerms,
            @JsonProperty("experience") Optional<? extends String> experience,
            @JsonProperty("followers") JsonNullable<? extends java.util.List<String>> followers,
            @JsonProperty("hiring_managers") Optional<? extends java.util.List<String>> hiringManagers,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("job_portal_url") JsonNullable<? extends String> jobPortalUrl,
            @JsonProperty("language") JsonNullable<? extends String> language,
            @JsonProperty("links") Optional<? extends java.util.List<JobLinks>> links,
            @JsonProperty("location") JsonNullable<? extends String> location,
            @JsonProperty("owner_id") JsonNullable<? extends String> ownerId,
            @JsonProperty("published_at") JsonNullable<? extends OffsetDateTime> publishedAt,
            @JsonProperty("record_url") JsonNullable<? extends String> recordUrl,
            @JsonProperty("recruiters") JsonNullable<? extends java.util.List<String>> recruiters,
            @JsonProperty("remote") JsonNullable<? extends Boolean> remote,
            @JsonProperty("requisition_id") Optional<? extends String> requisitionId,
            @JsonProperty("salary") Optional<? extends Salary> salary,
            @JsonProperty("sequence") Optional<? extends Long> sequence,
            @JsonProperty("slug") JsonNullable<? extends String> slug,
            @JsonProperty("status") Optional<? extends JobStatus> status,
            @JsonProperty("tags") JsonNullable<? extends java.util.List<String>> tags,
            @JsonProperty("title") JsonNullable<? extends String> title,
            @JsonProperty("updated_at") JsonNullable<? extends OffsetDateTime> updatedAt,
            @JsonProperty("updated_by") JsonNullable<? extends String> updatedBy,
            @JsonProperty("url") JsonNullable<? extends String> url,
            @JsonProperty("visibility") Optional<? extends Visibility> visibility) {
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(availableToEmployees, "availableToEmployees");
        Utils.checkNotNull(blocks, "blocks");
        Utils.checkNotNull(branch, "branch");
        Utils.checkNotNull(closing, "closing");
        Utils.checkNotNull(closingDate, "closingDate");
        Utils.checkNotNull(closingHtml, "closingHtml");
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(confidential, "confidential");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(deleted, "deleted");
        Utils.checkNotNull(department, "department");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(descriptionHtml, "descriptionHtml");
        Utils.checkNotNull(employmentTerms, "employmentTerms");
        Utils.checkNotNull(experience, "experience");
        Utils.checkNotNull(followers, "followers");
        Utils.checkNotNull(hiringManagers, "hiringManagers");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(jobPortalUrl, "jobPortalUrl");
        Utils.checkNotNull(language, "language");
        Utils.checkNotNull(links, "links");
        Utils.checkNotNull(location, "location");
        Utils.checkNotNull(ownerId, "ownerId");
        Utils.checkNotNull(publishedAt, "publishedAt");
        Utils.checkNotNull(recordUrl, "recordUrl");
        Utils.checkNotNull(recruiters, "recruiters");
        Utils.checkNotNull(remote, "remote");
        Utils.checkNotNull(requisitionId, "requisitionId");
        Utils.checkNotNull(salary, "salary");
        Utils.checkNotNull(sequence, "sequence");
        Utils.checkNotNull(slug, "slug");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(visibility, "visibility");
        this.addresses = addresses;
        this.availableToEmployees = availableToEmployees;
        this.blocks = blocks;
        this.branch = branch;
        this.closing = closing;
        this.closingDate = closingDate;
        this.closingHtml = closingHtml;
        this.code = code;
        this.confidential = confidential;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.customFields = customFields;
        this.deleted = deleted;
        this.department = department;
        this.description = description;
        this.descriptionHtml = descriptionHtml;
        this.employmentTerms = employmentTerms;
        this.experience = experience;
        this.followers = followers;
        this.hiringManagers = hiringManagers;
        this.id = id;
        this.jobPortalUrl = jobPortalUrl;
        this.language = language;
        this.links = links;
        this.location = location;
        this.ownerId = ownerId;
        this.publishedAt = publishedAt;
        this.recordUrl = recordUrl;
        this.recruiters = recruiters;
        this.remote = remote;
        this.requisitionId = requisitionId;
        this.salary = salary;
        this.sequence = sequence;
        this.slug = slug;
        this.status = status;
        this.tags = tags;
        this.title = title;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
        this.url = url;
        this.visibility = visibility;
    }

    public Optional<? extends java.util.List<Address>> addresses() {
        return addresses;
    }

    /**
     * Specifies whether an employee of the organization can apply for the job.
     */
    public Optional<? extends Boolean> availableToEmployees() {
        return availableToEmployees;
    }

    public Optional<? extends java.util.List<Blocks>> blocks() {
        return blocks;
    }

    /**
     * Details of the branch for which the job is created.
     */
    public Optional<? extends Branch> branch() {
        return branch;
    }

    public JsonNullable<? extends String> closing() {
        return closing;
    }

    public JsonNullable<? extends LocalDate> closingDate() {
        return closingDate;
    }

    /**
     * The closing section of the job description in HTML format
     */
    public JsonNullable<? extends String> closingHtml() {
        return closingHtml;
    }

    /**
     * The code of the job.
     */
    public Optional<? extends String> code() {
        return code;
    }

    public Optional<? extends Boolean> confidential() {
        return confidential;
    }

    /**
     * The date and time when the object was created.
     */
    public JsonNullable<? extends OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * The user who created the object.
     */
    public JsonNullable<? extends String> createdBy() {
        return createdBy;
    }

    public Optional<? extends java.util.List<CustomField>> customFields() {
        return customFields;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public JsonNullable<? extends Boolean> deleted() {
        return deleted;
    }

    public Optional<? extends Department> department() {
        return department;
    }

    /**
     * A description of the object.
     */
    public JsonNullable<? extends String> description() {
        return description;
    }

    /**
     * The job description in HTML format
     */
    public JsonNullable<? extends String> descriptionHtml() {
        return descriptionHtml;
    }

    public JsonNullable<? extends EmploymentTerms> employmentTerms() {
        return employmentTerms;
    }

    /**
     * Level of experience required for the job role.
     */
    public Optional<? extends String> experience() {
        return experience;
    }

    public JsonNullable<? extends java.util.List<String>> followers() {
        return followers;
    }

    public Optional<? extends java.util.List<String>> hiringManagers() {
        return hiringManagers;
    }

    /**
     * A unique identifier for an object.
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * URL of the job portal
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public JsonNullable<? extends String> jobPortalUrl() {
        return jobPortalUrl;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public JsonNullable<? extends String> language() {
        return language;
    }

    public Optional<? extends java.util.List<JobLinks>> links() {
        return links;
    }

    /**
     * Specifies the location for the job posting.
     */
    public JsonNullable<? extends String> location() {
        return location;
    }

    public JsonNullable<? extends String> ownerId() {
        return ownerId;
    }

    public JsonNullable<? extends OffsetDateTime> publishedAt() {
        return publishedAt;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public JsonNullable<? extends String> recordUrl() {
        return recordUrl;
    }

    /**
     * The recruiter is generally someone who is tasked to help the hiring manager find and screen qualified applicant
     */
    public JsonNullable<? extends java.util.List<String>> recruiters() {
        return recruiters;
    }

    /**
     * Specifies whether the posting is for a remote job.
     */
    public JsonNullable<? extends Boolean> remote() {
        return remote;
    }

    /**
     * A job's Requisition ID (Req ID) allows your organization to identify and track a job based on alphanumeric naming conventions unique to your company's internal processes.
     */
    public Optional<? extends String> requisitionId() {
        return requisitionId;
    }

    public Optional<? extends Salary> salary() {
        return salary;
    }

    /**
     * Sequence in relation to other jobs.
     */
    public Optional<? extends Long> sequence() {
        return sequence;
    }

    public JsonNullable<? extends String> slug() {
        return slug;
    }

    /**
     * The status of the job.
     */
    public Optional<? extends JobStatus> status() {
        return status;
    }

    public JsonNullable<? extends java.util.List<String>> tags() {
        return tags;
    }

    /**
     * The job title of the person.
     */
    public JsonNullable<? extends String> title() {
        return title;
    }

    /**
     * The date and time when the object was last updated.
     */
    public JsonNullable<? extends OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * The user who last updated the object.
     */
    public JsonNullable<? extends String> updatedBy() {
        return updatedBy;
    }

    /**
     * URL of the job description
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public JsonNullable<? extends String> url() {
        return url;
    }

    /**
     * The visibility of the job
     */
    public Optional<? extends Visibility> visibility() {
        return visibility;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Job withAddresses(java.util.List<Address> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = Optional.ofNullable(addresses);
        return this;
    }

    public Job withAddresses(Optional<? extends java.util.List<Address>> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    /**
     * Specifies whether an employee of the organization can apply for the job.
     */
    public Job withAvailableToEmployees(boolean availableToEmployees) {
        Utils.checkNotNull(availableToEmployees, "availableToEmployees");
        this.availableToEmployees = Optional.ofNullable(availableToEmployees);
        return this;
    }

    /**
     * Specifies whether an employee of the organization can apply for the job.
     */
    public Job withAvailableToEmployees(Optional<? extends Boolean> availableToEmployees) {
        Utils.checkNotNull(availableToEmployees, "availableToEmployees");
        this.availableToEmployees = availableToEmployees;
        return this;
    }

    public Job withBlocks(java.util.List<Blocks> blocks) {
        Utils.checkNotNull(blocks, "blocks");
        this.blocks = Optional.ofNullable(blocks);
        return this;
    }

    public Job withBlocks(Optional<? extends java.util.List<Blocks>> blocks) {
        Utils.checkNotNull(blocks, "blocks");
        this.blocks = blocks;
        return this;
    }

    /**
     * Details of the branch for which the job is created.
     */
    public Job withBranch(Branch branch) {
        Utils.checkNotNull(branch, "branch");
        this.branch = Optional.ofNullable(branch);
        return this;
    }

    /**
     * Details of the branch for which the job is created.
     */
    public Job withBranch(Optional<? extends Branch> branch) {
        Utils.checkNotNull(branch, "branch");
        this.branch = branch;
        return this;
    }

    public Job withClosing(String closing) {
        Utils.checkNotNull(closing, "closing");
        this.closing = JsonNullable.of(closing);
        return this;
    }

    public Job withClosing(JsonNullable<? extends String> closing) {
        Utils.checkNotNull(closing, "closing");
        this.closing = closing;
        return this;
    }

    public Job withClosingDate(LocalDate closingDate) {
        Utils.checkNotNull(closingDate, "closingDate");
        this.closingDate = JsonNullable.of(closingDate);
        return this;
    }

    public Job withClosingDate(JsonNullable<? extends LocalDate> closingDate) {
        Utils.checkNotNull(closingDate, "closingDate");
        this.closingDate = closingDate;
        return this;
    }

    /**
     * The closing section of the job description in HTML format
     */
    public Job withClosingHtml(String closingHtml) {
        Utils.checkNotNull(closingHtml, "closingHtml");
        this.closingHtml = JsonNullable.of(closingHtml);
        return this;
    }

    /**
     * The closing section of the job description in HTML format
     */
    public Job withClosingHtml(JsonNullable<? extends String> closingHtml) {
        Utils.checkNotNull(closingHtml, "closingHtml");
        this.closingHtml = closingHtml;
        return this;
    }

    /**
     * The code of the job.
     */
    public Job withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }

    /**
     * The code of the job.
     */
    public Job withCode(Optional<? extends String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    public Job withConfidential(boolean confidential) {
        Utils.checkNotNull(confidential, "confidential");
        this.confidential = Optional.ofNullable(confidential);
        return this;
    }

    public Job withConfidential(Optional<? extends Boolean> confidential) {
        Utils.checkNotNull(confidential, "confidential");
        this.confidential = confidential;
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Job withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = JsonNullable.of(createdAt);
        return this;
    }

    /**
     * The date and time when the object was created.
     */
    public Job withCreatedAt(JsonNullable<? extends OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The user who created the object.
     */
    public Job withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }

    /**
     * The user who created the object.
     */
    public Job withCreatedBy(JsonNullable<? extends String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    public Job withCustomFields(java.util.List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }

    public Job withCustomFields(Optional<? extends java.util.List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public Job withDeleted(boolean deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = JsonNullable.of(deleted);
        return this;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public Job withDeleted(JsonNullable<? extends Boolean> deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = deleted;
        return this;
    }

    public Job withDepartment(Department department) {
        Utils.checkNotNull(department, "department");
        this.department = Optional.ofNullable(department);
        return this;
    }

    public Job withDepartment(Optional<? extends Department> department) {
        Utils.checkNotNull(department, "department");
        this.department = department;
        return this;
    }

    /**
     * A description of the object.
     */
    public Job withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * A description of the object.
     */
    public Job withDescription(JsonNullable<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The job description in HTML format
     */
    public Job withDescriptionHtml(String descriptionHtml) {
        Utils.checkNotNull(descriptionHtml, "descriptionHtml");
        this.descriptionHtml = JsonNullable.of(descriptionHtml);
        return this;
    }

    /**
     * The job description in HTML format
     */
    public Job withDescriptionHtml(JsonNullable<? extends String> descriptionHtml) {
        Utils.checkNotNull(descriptionHtml, "descriptionHtml");
        this.descriptionHtml = descriptionHtml;
        return this;
    }

    public Job withEmploymentTerms(EmploymentTerms employmentTerms) {
        Utils.checkNotNull(employmentTerms, "employmentTerms");
        this.employmentTerms = JsonNullable.of(employmentTerms);
        return this;
    }

    public Job withEmploymentTerms(JsonNullable<? extends EmploymentTerms> employmentTerms) {
        Utils.checkNotNull(employmentTerms, "employmentTerms");
        this.employmentTerms = employmentTerms;
        return this;
    }

    /**
     * Level of experience required for the job role.
     */
    public Job withExperience(String experience) {
        Utils.checkNotNull(experience, "experience");
        this.experience = Optional.ofNullable(experience);
        return this;
    }

    /**
     * Level of experience required for the job role.
     */
    public Job withExperience(Optional<? extends String> experience) {
        Utils.checkNotNull(experience, "experience");
        this.experience = experience;
        return this;
    }

    public Job withFollowers(java.util.List<String> followers) {
        Utils.checkNotNull(followers, "followers");
        this.followers = JsonNullable.of(followers);
        return this;
    }

    public Job withFollowers(JsonNullable<? extends java.util.List<String>> followers) {
        Utils.checkNotNull(followers, "followers");
        this.followers = followers;
        return this;
    }

    public Job withHiringManagers(java.util.List<String> hiringManagers) {
        Utils.checkNotNull(hiringManagers, "hiringManagers");
        this.hiringManagers = Optional.ofNullable(hiringManagers);
        return this;
    }

    public Job withHiringManagers(Optional<? extends java.util.List<String>> hiringManagers) {
        Utils.checkNotNull(hiringManagers, "hiringManagers");
        this.hiringManagers = hiringManagers;
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public Job withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * A unique identifier for an object.
     */
    public Job withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * URL of the job portal
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Job withJobPortalUrl(String jobPortalUrl) {
        Utils.checkNotNull(jobPortalUrl, "jobPortalUrl");
        this.jobPortalUrl = JsonNullable.of(jobPortalUrl);
        return this;
    }

    /**
     * URL of the job portal
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Job withJobPortalUrl(JsonNullable<? extends String> jobPortalUrl) {
        Utils.checkNotNull(jobPortalUrl, "jobPortalUrl");
        this.jobPortalUrl = jobPortalUrl;
        return this;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public Job withLanguage(String language) {
        Utils.checkNotNull(language, "language");
        this.language = JsonNullable.of(language);
        return this;
    }

    /**
     * language code according to ISO 639-1. For the United States - EN
     */
    public Job withLanguage(JsonNullable<? extends String> language) {
        Utils.checkNotNull(language, "language");
        this.language = language;
        return this;
    }

    public Job withLinks(java.util.List<JobLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }

    public Job withLinks(Optional<? extends java.util.List<JobLinks>> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    /**
     * Specifies the location for the job posting.
     */
    public Job withLocation(String location) {
        Utils.checkNotNull(location, "location");
        this.location = JsonNullable.of(location);
        return this;
    }

    /**
     * Specifies the location for the job posting.
     */
    public Job withLocation(JsonNullable<? extends String> location) {
        Utils.checkNotNull(location, "location");
        this.location = location;
        return this;
    }

    public Job withOwnerId(String ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }

    public Job withOwnerId(JsonNullable<? extends String> ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = ownerId;
        return this;
    }

    public Job withPublishedAt(OffsetDateTime publishedAt) {
        Utils.checkNotNull(publishedAt, "publishedAt");
        this.publishedAt = JsonNullable.of(publishedAt);
        return this;
    }

    public Job withPublishedAt(JsonNullable<? extends OffsetDateTime> publishedAt) {
        Utils.checkNotNull(publishedAt, "publishedAt");
        this.publishedAt = publishedAt;
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Job withRecordUrl(String recordUrl) {
        Utils.checkNotNull(recordUrl, "recordUrl");
        this.recordUrl = JsonNullable.of(recordUrl);
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Job withRecordUrl(JsonNullable<? extends String> recordUrl) {
        Utils.checkNotNull(recordUrl, "recordUrl");
        this.recordUrl = recordUrl;
        return this;
    }

    /**
     * The recruiter is generally someone who is tasked to help the hiring manager find and screen qualified applicant
     */
    public Job withRecruiters(java.util.List<String> recruiters) {
        Utils.checkNotNull(recruiters, "recruiters");
        this.recruiters = JsonNullable.of(recruiters);
        return this;
    }

    /**
     * The recruiter is generally someone who is tasked to help the hiring manager find and screen qualified applicant
     */
    public Job withRecruiters(JsonNullable<? extends java.util.List<String>> recruiters) {
        Utils.checkNotNull(recruiters, "recruiters");
        this.recruiters = recruiters;
        return this;
    }

    /**
     * Specifies whether the posting is for a remote job.
     */
    public Job withRemote(boolean remote) {
        Utils.checkNotNull(remote, "remote");
        this.remote = JsonNullable.of(remote);
        return this;
    }

    /**
     * Specifies whether the posting is for a remote job.
     */
    public Job withRemote(JsonNullable<? extends Boolean> remote) {
        Utils.checkNotNull(remote, "remote");
        this.remote = remote;
        return this;
    }

    /**
     * A job's Requisition ID (Req ID) allows your organization to identify and track a job based on alphanumeric naming conventions unique to your company's internal processes.
     */
    public Job withRequisitionId(String requisitionId) {
        Utils.checkNotNull(requisitionId, "requisitionId");
        this.requisitionId = Optional.ofNullable(requisitionId);
        return this;
    }

    /**
     * A job's Requisition ID (Req ID) allows your organization to identify and track a job based on alphanumeric naming conventions unique to your company's internal processes.
     */
    public Job withRequisitionId(Optional<? extends String> requisitionId) {
        Utils.checkNotNull(requisitionId, "requisitionId");
        this.requisitionId = requisitionId;
        return this;
    }

    public Job withSalary(Salary salary) {
        Utils.checkNotNull(salary, "salary");
        this.salary = Optional.ofNullable(salary);
        return this;
    }

    public Job withSalary(Optional<? extends Salary> salary) {
        Utils.checkNotNull(salary, "salary");
        this.salary = salary;
        return this;
    }

    /**
     * Sequence in relation to other jobs.
     */
    public Job withSequence(long sequence) {
        Utils.checkNotNull(sequence, "sequence");
        this.sequence = Optional.ofNullable(sequence);
        return this;
    }

    /**
     * Sequence in relation to other jobs.
     */
    public Job withSequence(Optional<? extends Long> sequence) {
        Utils.checkNotNull(sequence, "sequence");
        this.sequence = sequence;
        return this;
    }

    public Job withSlug(String slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = JsonNullable.of(slug);
        return this;
    }

    public Job withSlug(JsonNullable<? extends String> slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = slug;
        return this;
    }

    /**
     * The status of the job.
     */
    public Job withStatus(JobStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status of the job.
     */
    public Job withStatus(Optional<? extends JobStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public Job withTags(java.util.List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = JsonNullable.of(tags);
        return this;
    }

    public Job withTags(JsonNullable<? extends java.util.List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    /**
     * The job title of the person.
     */
    public Job withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    /**
     * The job title of the person.
     */
    public Job withTitle(JsonNullable<? extends String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Job withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = JsonNullable.of(updatedAt);
        return this;
    }

    /**
     * The date and time when the object was last updated.
     */
    public Job withUpdatedAt(JsonNullable<? extends OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Job withUpdatedBy(String updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = JsonNullable.of(updatedBy);
        return this;
    }

    /**
     * The user who last updated the object.
     */
    public Job withUpdatedBy(JsonNullable<? extends String> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * URL of the job description
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Job withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = JsonNullable.of(url);
        return this;
    }

    /**
     * URL of the job description
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Job withUrl(JsonNullable<? extends String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * The visibility of the job
     */
    public Job withVisibility(Visibility visibility) {
        Utils.checkNotNull(visibility, "visibility");
        this.visibility = Optional.ofNullable(visibility);
        return this;
    }

    /**
     * The visibility of the job
     */
    public Job withVisibility(Optional<? extends Visibility> visibility) {
        Utils.checkNotNull(visibility, "visibility");
        this.visibility = visibility;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Job other = (Job) o;
        return 
            java.util.Objects.deepEquals(this.addresses, other.addresses) &&
            java.util.Objects.deepEquals(this.availableToEmployees, other.availableToEmployees) &&
            java.util.Objects.deepEquals(this.blocks, other.blocks) &&
            java.util.Objects.deepEquals(this.branch, other.branch) &&
            java.util.Objects.deepEquals(this.closing, other.closing) &&
            java.util.Objects.deepEquals(this.closingDate, other.closingDate) &&
            java.util.Objects.deepEquals(this.closingHtml, other.closingHtml) &&
            java.util.Objects.deepEquals(this.code, other.code) &&
            java.util.Objects.deepEquals(this.confidential, other.confidential) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.createdBy, other.createdBy) &&
            java.util.Objects.deepEquals(this.customFields, other.customFields) &&
            java.util.Objects.deepEquals(this.deleted, other.deleted) &&
            java.util.Objects.deepEquals(this.department, other.department) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.descriptionHtml, other.descriptionHtml) &&
            java.util.Objects.deepEquals(this.employmentTerms, other.employmentTerms) &&
            java.util.Objects.deepEquals(this.experience, other.experience) &&
            java.util.Objects.deepEquals(this.followers, other.followers) &&
            java.util.Objects.deepEquals(this.hiringManagers, other.hiringManagers) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.jobPortalUrl, other.jobPortalUrl) &&
            java.util.Objects.deepEquals(this.language, other.language) &&
            java.util.Objects.deepEquals(this.links, other.links) &&
            java.util.Objects.deepEquals(this.location, other.location) &&
            java.util.Objects.deepEquals(this.ownerId, other.ownerId) &&
            java.util.Objects.deepEquals(this.publishedAt, other.publishedAt) &&
            java.util.Objects.deepEquals(this.recordUrl, other.recordUrl) &&
            java.util.Objects.deepEquals(this.recruiters, other.recruiters) &&
            java.util.Objects.deepEquals(this.remote, other.remote) &&
            java.util.Objects.deepEquals(this.requisitionId, other.requisitionId) &&
            java.util.Objects.deepEquals(this.salary, other.salary) &&
            java.util.Objects.deepEquals(this.sequence, other.sequence) &&
            java.util.Objects.deepEquals(this.slug, other.slug) &&
            java.util.Objects.deepEquals(this.status, other.status) &&
            java.util.Objects.deepEquals(this.tags, other.tags) &&
            java.util.Objects.deepEquals(this.title, other.title) &&
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            java.util.Objects.deepEquals(this.updatedBy, other.updatedBy) &&
            java.util.Objects.deepEquals(this.url, other.url) &&
            java.util.Objects.deepEquals(this.visibility, other.visibility);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            addresses,
            availableToEmployees,
            blocks,
            branch,
            closing,
            closingDate,
            closingHtml,
            code,
            confidential,
            createdAt,
            createdBy,
            customFields,
            deleted,
            department,
            description,
            descriptionHtml,
            employmentTerms,
            experience,
            followers,
            hiringManagers,
            id,
            jobPortalUrl,
            language,
            links,
            location,
            ownerId,
            publishedAt,
            recordUrl,
            recruiters,
            remote,
            requisitionId,
            salary,
            sequence,
            slug,
            status,
            tags,
            title,
            updatedAt,
            updatedBy,
            url,
            visibility);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Job.class,
                "addresses", addresses,
                "availableToEmployees", availableToEmployees,
                "blocks", blocks,
                "branch", branch,
                "closing", closing,
                "closingDate", closingDate,
                "closingHtml", closingHtml,
                "code", code,
                "confidential", confidential,
                "createdAt", createdAt,
                "createdBy", createdBy,
                "customFields", customFields,
                "deleted", deleted,
                "department", department,
                "description", description,
                "descriptionHtml", descriptionHtml,
                "employmentTerms", employmentTerms,
                "experience", experience,
                "followers", followers,
                "hiringManagers", hiringManagers,
                "id", id,
                "jobPortalUrl", jobPortalUrl,
                "language", language,
                "links", links,
                "location", location,
                "ownerId", ownerId,
                "publishedAt", publishedAt,
                "recordUrl", recordUrl,
                "recruiters", recruiters,
                "remote", remote,
                "requisitionId", requisitionId,
                "salary", salary,
                "sequence", sequence,
                "slug", slug,
                "status", status,
                "tags", tags,
                "title", title,
                "updatedAt", updatedAt,
                "updatedBy", updatedBy,
                "url", url,
                "visibility", visibility);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<Address>> addresses = Optional.empty();
 
        private Optional<? extends Boolean> availableToEmployees = Optional.empty();
 
        private Optional<? extends java.util.List<Blocks>> blocks = Optional.empty();
 
        private Optional<? extends Branch> branch = Optional.empty();
 
        private JsonNullable<? extends String> closing = JsonNullable.undefined();
 
        private JsonNullable<? extends LocalDate> closingDate = JsonNullable.undefined();
 
        private JsonNullable<? extends String> closingHtml = JsonNullable.undefined();
 
        private Optional<? extends String> code = Optional.empty();
 
        private Optional<? extends Boolean> confidential = Optional.empty();
 
        private JsonNullable<? extends OffsetDateTime> createdAt = JsonNullable.undefined();
 
        private JsonNullable<? extends String> createdBy = JsonNullable.undefined();
 
        private Optional<? extends java.util.List<CustomField>> customFields = Optional.empty();
 
        private JsonNullable<? extends Boolean> deleted = JsonNullable.undefined();
 
        private Optional<? extends Department> department = Optional.empty();
 
        private JsonNullable<? extends String> description = JsonNullable.undefined();
 
        private JsonNullable<? extends String> descriptionHtml = JsonNullable.undefined();
 
        private JsonNullable<? extends EmploymentTerms> employmentTerms = JsonNullable.undefined();
 
        private Optional<? extends String> experience = Optional.empty();
 
        private JsonNullable<? extends java.util.List<String>> followers = JsonNullable.undefined();
 
        private Optional<? extends java.util.List<String>> hiringManagers = Optional.empty();
 
        private Optional<? extends String> id = Optional.empty();
 
        @Deprecated
        private JsonNullable<? extends String> jobPortalUrl = JsonNullable.undefined();
 
        private JsonNullable<? extends String> language = JsonNullable.undefined();
 
        private Optional<? extends java.util.List<JobLinks>> links = Optional.empty();
 
        private JsonNullable<? extends String> location = JsonNullable.undefined();
 
        private JsonNullable<? extends String> ownerId = JsonNullable.undefined();
 
        private JsonNullable<? extends OffsetDateTime> publishedAt = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<? extends String> recordUrl = JsonNullable.undefined();
 
        private JsonNullable<? extends java.util.List<String>> recruiters = JsonNullable.undefined();
 
        private JsonNullable<? extends Boolean> remote = JsonNullable.undefined();
 
        private Optional<? extends String> requisitionId = Optional.empty();
 
        private Optional<? extends Salary> salary = Optional.empty();
 
        private Optional<? extends Long> sequence = Optional.empty();
 
        private JsonNullable<? extends String> slug = JsonNullable.undefined();
 
        private Optional<? extends JobStatus> status = Optional.empty();
 
        private JsonNullable<? extends java.util.List<String>> tags = JsonNullable.undefined();
 
        private JsonNullable<? extends String> title = JsonNullable.undefined();
 
        private JsonNullable<? extends OffsetDateTime> updatedAt = JsonNullable.undefined();
 
        private JsonNullable<? extends String> updatedBy = JsonNullable.undefined();
 
        @Deprecated
        private JsonNullable<? extends String> url = JsonNullable.undefined();
 
        private Optional<? extends Visibility> visibility = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder addresses(java.util.List<Address> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = Optional.ofNullable(addresses);
            return this;
        }

        public Builder addresses(Optional<? extends java.util.List<Address>> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }

        /**
         * Specifies whether an employee of the organization can apply for the job.
         */
        public Builder availableToEmployees(boolean availableToEmployees) {
            Utils.checkNotNull(availableToEmployees, "availableToEmployees");
            this.availableToEmployees = Optional.ofNullable(availableToEmployees);
            return this;
        }

        /**
         * Specifies whether an employee of the organization can apply for the job.
         */
        public Builder availableToEmployees(Optional<? extends Boolean> availableToEmployees) {
            Utils.checkNotNull(availableToEmployees, "availableToEmployees");
            this.availableToEmployees = availableToEmployees;
            return this;
        }

        public Builder blocks(java.util.List<Blocks> blocks) {
            Utils.checkNotNull(blocks, "blocks");
            this.blocks = Optional.ofNullable(blocks);
            return this;
        }

        public Builder blocks(Optional<? extends java.util.List<Blocks>> blocks) {
            Utils.checkNotNull(blocks, "blocks");
            this.blocks = blocks;
            return this;
        }

        /**
         * Details of the branch for which the job is created.
         */
        public Builder branch(Branch branch) {
            Utils.checkNotNull(branch, "branch");
            this.branch = Optional.ofNullable(branch);
            return this;
        }

        /**
         * Details of the branch for which the job is created.
         */
        public Builder branch(Optional<? extends Branch> branch) {
            Utils.checkNotNull(branch, "branch");
            this.branch = branch;
            return this;
        }

        public Builder closing(String closing) {
            Utils.checkNotNull(closing, "closing");
            this.closing = JsonNullable.of(closing);
            return this;
        }

        public Builder closing(JsonNullable<? extends String> closing) {
            Utils.checkNotNull(closing, "closing");
            this.closing = closing;
            return this;
        }

        public Builder closingDate(LocalDate closingDate) {
            Utils.checkNotNull(closingDate, "closingDate");
            this.closingDate = JsonNullable.of(closingDate);
            return this;
        }

        public Builder closingDate(JsonNullable<? extends LocalDate> closingDate) {
            Utils.checkNotNull(closingDate, "closingDate");
            this.closingDate = closingDate;
            return this;
        }

        /**
         * The closing section of the job description in HTML format
         */
        public Builder closingHtml(String closingHtml) {
            Utils.checkNotNull(closingHtml, "closingHtml");
            this.closingHtml = JsonNullable.of(closingHtml);
            return this;
        }

        /**
         * The closing section of the job description in HTML format
         */
        public Builder closingHtml(JsonNullable<? extends String> closingHtml) {
            Utils.checkNotNull(closingHtml, "closingHtml");
            this.closingHtml = closingHtml;
            return this;
        }

        /**
         * The code of the job.
         */
        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }

        /**
         * The code of the job.
         */
        public Builder code(Optional<? extends String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        public Builder confidential(boolean confidential) {
            Utils.checkNotNull(confidential, "confidential");
            this.confidential = Optional.ofNullable(confidential);
            return this;
        }

        public Builder confidential(Optional<? extends Boolean> confidential) {
            Utils.checkNotNull(confidential, "confidential");
            this.confidential = confidential;
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = JsonNullable.of(createdAt);
            return this;
        }

        /**
         * The date and time when the object was created.
         */
        public Builder createdAt(JsonNullable<? extends OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        /**
         * The user who created the object.
         */
        public Builder createdBy(JsonNullable<? extends String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        public Builder customFields(java.util.List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends java.util.List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }

        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(boolean deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = JsonNullable.of(deleted);
            return this;
        }

        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(JsonNullable<? extends Boolean> deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = deleted;
            return this;
        }

        public Builder department(Department department) {
            Utils.checkNotNull(department, "department");
            this.department = Optional.ofNullable(department);
            return this;
        }

        public Builder department(Optional<? extends Department> department) {
            Utils.checkNotNull(department, "department");
            this.department = department;
            return this;
        }

        /**
         * A description of the object.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * A description of the object.
         */
        public Builder description(JsonNullable<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The job description in HTML format
         */
        public Builder descriptionHtml(String descriptionHtml) {
            Utils.checkNotNull(descriptionHtml, "descriptionHtml");
            this.descriptionHtml = JsonNullable.of(descriptionHtml);
            return this;
        }

        /**
         * The job description in HTML format
         */
        public Builder descriptionHtml(JsonNullable<? extends String> descriptionHtml) {
            Utils.checkNotNull(descriptionHtml, "descriptionHtml");
            this.descriptionHtml = descriptionHtml;
            return this;
        }

        public Builder employmentTerms(EmploymentTerms employmentTerms) {
            Utils.checkNotNull(employmentTerms, "employmentTerms");
            this.employmentTerms = JsonNullable.of(employmentTerms);
            return this;
        }

        public Builder employmentTerms(JsonNullable<? extends EmploymentTerms> employmentTerms) {
            Utils.checkNotNull(employmentTerms, "employmentTerms");
            this.employmentTerms = employmentTerms;
            return this;
        }

        /**
         * Level of experience required for the job role.
         */
        public Builder experience(String experience) {
            Utils.checkNotNull(experience, "experience");
            this.experience = Optional.ofNullable(experience);
            return this;
        }

        /**
         * Level of experience required for the job role.
         */
        public Builder experience(Optional<? extends String> experience) {
            Utils.checkNotNull(experience, "experience");
            this.experience = experience;
            return this;
        }

        public Builder followers(java.util.List<String> followers) {
            Utils.checkNotNull(followers, "followers");
            this.followers = JsonNullable.of(followers);
            return this;
        }

        public Builder followers(JsonNullable<? extends java.util.List<String>> followers) {
            Utils.checkNotNull(followers, "followers");
            this.followers = followers;
            return this;
        }

        public Builder hiringManagers(java.util.List<String> hiringManagers) {
            Utils.checkNotNull(hiringManagers, "hiringManagers");
            this.hiringManagers = Optional.ofNullable(hiringManagers);
            return this;
        }

        public Builder hiringManagers(Optional<? extends java.util.List<String>> hiringManagers) {
            Utils.checkNotNull(hiringManagers, "hiringManagers");
            this.hiringManagers = hiringManagers;
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * A unique identifier for an object.
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * URL of the job portal
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder jobPortalUrl(String jobPortalUrl) {
            Utils.checkNotNull(jobPortalUrl, "jobPortalUrl");
            this.jobPortalUrl = JsonNullable.of(jobPortalUrl);
            return this;
        }

        /**
         * URL of the job portal
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder jobPortalUrl(JsonNullable<? extends String> jobPortalUrl) {
            Utils.checkNotNull(jobPortalUrl, "jobPortalUrl");
            this.jobPortalUrl = jobPortalUrl;
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(String language) {
            Utils.checkNotNull(language, "language");
            this.language = JsonNullable.of(language);
            return this;
        }

        /**
         * language code according to ISO 639-1. For the United States - EN
         */
        public Builder language(JsonNullable<? extends String> language) {
            Utils.checkNotNull(language, "language");
            this.language = language;
            return this;
        }

        public Builder links(java.util.List<JobLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        public Builder links(Optional<? extends java.util.List<JobLinks>> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        /**
         * Specifies the location for the job posting.
         */
        public Builder location(String location) {
            Utils.checkNotNull(location, "location");
            this.location = JsonNullable.of(location);
            return this;
        }

        /**
         * Specifies the location for the job posting.
         */
        public Builder location(JsonNullable<? extends String> location) {
            Utils.checkNotNull(location, "location");
            this.location = location;
            return this;
        }

        public Builder ownerId(String ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        public Builder ownerId(JsonNullable<? extends String> ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = ownerId;
            return this;
        }

        public Builder publishedAt(OffsetDateTime publishedAt) {
            Utils.checkNotNull(publishedAt, "publishedAt");
            this.publishedAt = JsonNullable.of(publishedAt);
            return this;
        }

        public Builder publishedAt(JsonNullable<? extends OffsetDateTime> publishedAt) {
            Utils.checkNotNull(publishedAt, "publishedAt");
            this.publishedAt = publishedAt;
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder recordUrl(String recordUrl) {
            Utils.checkNotNull(recordUrl, "recordUrl");
            this.recordUrl = JsonNullable.of(recordUrl);
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder recordUrl(JsonNullable<? extends String> recordUrl) {
            Utils.checkNotNull(recordUrl, "recordUrl");
            this.recordUrl = recordUrl;
            return this;
        }

        /**
         * The recruiter is generally someone who is tasked to help the hiring manager find and screen qualified applicant
         */
        public Builder recruiters(java.util.List<String> recruiters) {
            Utils.checkNotNull(recruiters, "recruiters");
            this.recruiters = JsonNullable.of(recruiters);
            return this;
        }

        /**
         * The recruiter is generally someone who is tasked to help the hiring manager find and screen qualified applicant
         */
        public Builder recruiters(JsonNullable<? extends java.util.List<String>> recruiters) {
            Utils.checkNotNull(recruiters, "recruiters");
            this.recruiters = recruiters;
            return this;
        }

        /**
         * Specifies whether the posting is for a remote job.
         */
        public Builder remote(boolean remote) {
            Utils.checkNotNull(remote, "remote");
            this.remote = JsonNullable.of(remote);
            return this;
        }

        /**
         * Specifies whether the posting is for a remote job.
         */
        public Builder remote(JsonNullable<? extends Boolean> remote) {
            Utils.checkNotNull(remote, "remote");
            this.remote = remote;
            return this;
        }

        /**
         * A job's Requisition ID (Req ID) allows your organization to identify and track a job based on alphanumeric naming conventions unique to your company's internal processes.
         */
        public Builder requisitionId(String requisitionId) {
            Utils.checkNotNull(requisitionId, "requisitionId");
            this.requisitionId = Optional.ofNullable(requisitionId);
            return this;
        }

        /**
         * A job's Requisition ID (Req ID) allows your organization to identify and track a job based on alphanumeric naming conventions unique to your company's internal processes.
         */
        public Builder requisitionId(Optional<? extends String> requisitionId) {
            Utils.checkNotNull(requisitionId, "requisitionId");
            this.requisitionId = requisitionId;
            return this;
        }

        public Builder salary(Salary salary) {
            Utils.checkNotNull(salary, "salary");
            this.salary = Optional.ofNullable(salary);
            return this;
        }

        public Builder salary(Optional<? extends Salary> salary) {
            Utils.checkNotNull(salary, "salary");
            this.salary = salary;
            return this;
        }

        /**
         * Sequence in relation to other jobs.
         */
        public Builder sequence(long sequence) {
            Utils.checkNotNull(sequence, "sequence");
            this.sequence = Optional.ofNullable(sequence);
            return this;
        }

        /**
         * Sequence in relation to other jobs.
         */
        public Builder sequence(Optional<? extends Long> sequence) {
            Utils.checkNotNull(sequence, "sequence");
            this.sequence = sequence;
            return this;
        }

        public Builder slug(String slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = JsonNullable.of(slug);
            return this;
        }

        public Builder slug(JsonNullable<? extends String> slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = slug;
            return this;
        }

        /**
         * The status of the job.
         */
        public Builder status(JobStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the job.
         */
        public Builder status(Optional<? extends JobStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder tags(java.util.List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = JsonNullable.of(tags);
            return this;
        }

        public Builder tags(JsonNullable<? extends java.util.List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }

        /**
         * The job title of the person.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * The job title of the person.
         */
        public Builder title(JsonNullable<? extends String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = JsonNullable.of(updatedAt);
            return this;
        }

        /**
         * The date and time when the object was last updated.
         */
        public Builder updatedAt(JsonNullable<? extends OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(String updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = JsonNullable.of(updatedBy);
            return this;
        }

        /**
         * The user who last updated the object.
         */
        public Builder updatedBy(JsonNullable<? extends String> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }

        /**
         * URL of the job description
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = JsonNullable.of(url);
            return this;
        }

        /**
         * URL of the job description
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder url(JsonNullable<? extends String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * The visibility of the job
         */
        public Builder visibility(Visibility visibility) {
            Utils.checkNotNull(visibility, "visibility");
            this.visibility = Optional.ofNullable(visibility);
            return this;
        }

        /**
         * The visibility of the job
         */
        public Builder visibility(Optional<? extends Visibility> visibility) {
            Utils.checkNotNull(visibility, "visibility");
            this.visibility = visibility;
            return this;
        }
        
        public Job build() {
            return new Job(
                addresses,
                availableToEmployees,
                blocks,
                branch,
                closing,
                closingDate,
                closingHtml,
                code,
                confidential,
                createdAt,
                createdBy,
                customFields,
                deleted,
                department,
                description,
                descriptionHtml,
                employmentTerms,
                experience,
                followers,
                hiringManagers,
                id,
                jobPortalUrl,
                language,
                links,
                location,
                ownerId,
                publishedAt,
                recordUrl,
                recruiters,
                remote,
                requisitionId,
                salary,
                sequence,
                slug,
                status,
                tags,
                title,
                updatedAt,
                updatedBy,
                url,
                visibility);
        }
    }
}

