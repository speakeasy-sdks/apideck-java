/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package apideck.ats.apideck.models.shared;

import apideck.ats.apideck.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapitools.jackson.nullable.JsonNullable;


public class SocialLinks {

    /**
     * Unique identifier of the social link
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<? extends String> id;

    /**
     * Type of the social link, e.g. twitter
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<? extends String> type;

    /**
     * URL of the social link, e.g. https://www.twitter.com/apideck
     */
    @JsonProperty("url")
    private String url;

    public SocialLinks(
            @JsonProperty("id") JsonNullable<? extends String> id,
            @JsonProperty("type") JsonNullable<? extends String> type,
            @JsonProperty("url") String url) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(url, "url");
        this.id = id;
        this.type = type;
        this.url = url;
    }

    /**
     * Unique identifier of the social link
     */
    public JsonNullable<? extends String> id() {
        return id;
    }

    /**
     * Type of the social link, e.g. twitter
     */
    public JsonNullable<? extends String> type() {
        return type;
    }

    /**
     * URL of the social link, e.g. https://www.twitter.com/apideck
     */
    public String url() {
        return url;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier of the social link
     */
    public SocialLinks withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * Unique identifier of the social link
     */
    public SocialLinks withId(JsonNullable<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Type of the social link, e.g. twitter
     */
    public SocialLinks withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * Type of the social link, e.g. twitter
     */
    public SocialLinks withType(JsonNullable<? extends String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * URL of the social link, e.g. https://www.twitter.com/apideck
     */
    public SocialLinks withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SocialLinks other = (SocialLinks) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            type,
            url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SocialLinks.class,
                "id", id,
                "type", type,
                "url", url);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends String> id = JsonNullable.undefined();
 
        private JsonNullable<? extends String> type = JsonNullable.undefined();
 
        private String url;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier of the social link
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Unique identifier of the social link
         */
        public Builder id(JsonNullable<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Type of the social link, e.g. twitter
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * Type of the social link, e.g. twitter
         */
        public Builder type(JsonNullable<? extends String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * URL of the social link, e.g. https://www.twitter.com/apideck
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }
        
        public SocialLinks build() {
            return new SocialLinks(
                id,
                type,
                url);
        }
    }
}

