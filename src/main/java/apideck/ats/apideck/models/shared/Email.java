/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package apideck.ats.apideck.models.shared;

import apideck.ats.apideck.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Email {

    /**
     * Email address
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("email")
    private Optional<? extends String> email;

    /**
     * Unique identifier for the email address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<? extends String> id;

    /**
     * Email type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<? extends EmailType> type;

    public Email(
            @JsonProperty("email") Optional<? extends String> email,
            @JsonProperty("id") JsonNullable<? extends String> id,
            @JsonProperty("type") JsonNullable<? extends EmailType> type) {
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(type, "type");
        this.email = email;
        this.id = id;
        this.type = type;
    }

    /**
     * Email address
     */
    public Optional<? extends String> email() {
        return email;
    }

    /**
     * Unique identifier for the email address
     */
    public JsonNullable<? extends String> id() {
        return id;
    }

    /**
     * Email type
     */
    public JsonNullable<? extends EmailType> type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Email address
     */
    public Email withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    /**
     * Email address
     */
    public Email withEmail(Optional<? extends String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * Unique identifier for the email address
     */
    public Email withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * Unique identifier for the email address
     */
    public Email withId(JsonNullable<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Email type
     */
    public Email withType(EmailType type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * Email type
     */
    public Email withType(JsonNullable<? extends EmailType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Email other = (Email) o;
        return 
            java.util.Objects.deepEquals(this.email, other.email) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            email,
            id,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Email.class,
                "email", email,
                "id", id,
                "type", type);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> email = Optional.empty();
 
        private JsonNullable<? extends String> id = JsonNullable.undefined();
 
        private JsonNullable<? extends EmailType> type = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Email address
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * Email address
         */
        public Builder email(Optional<? extends String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * Unique identifier for the email address
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Unique identifier for the email address
         */
        public Builder id(JsonNullable<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Email type
         */
        public Builder type(EmailType type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * Email type
         */
        public Builder type(JsonNullable<? extends EmailType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public Email build() {
            return new Email(
                email,
                id,
                type);
        }
    }
}

