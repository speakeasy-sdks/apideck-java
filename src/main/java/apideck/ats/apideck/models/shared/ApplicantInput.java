/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package apideck.ats.apideck.models.shared;

import apideck.ats.apideck.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ApplicantInput {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private Optional<? extends java.util.List<Address>> addresses;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anonymized")
    private Optional<? extends Boolean> anonymized;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application_ids")
    private JsonNullable<? extends java.util.List<String>> applicationIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applications")
    private JsonNullable<? extends java.util.List<String>> applications;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archived")
    private JsonNullable<? extends Boolean> archived;

    /**
     * The date of birth of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthday")
    private JsonNullable<? extends LocalDate> birthday;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("confidential")
    private Optional<? extends Boolean> confidential;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coordinator_id")
    private Optional<? extends String> coordinatorId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cover_letter")
    private Optional<? extends String> coverLetter;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends java.util.List<CustomField>> customFields;

    /**
     * Flag to indicate if the object is deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    private JsonNullable<? extends Boolean> deleted;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private Optional<? extends java.util.List<Email>> emails;

    /**
     * The first name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<? extends String> firstName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followers")
    private JsonNullable<? extends java.util.List<String>> followers;

    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("headline")
    private Optional<? extends String> headline;

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initials")
    private JsonNullable<? extends String> initials;

    /**
     * The last name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<? extends String> lastName;

    /**
     * Middle name of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middle_name")
    private JsonNullable<? extends String> middleName;

    /**
     * The name of an applicant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<? extends String> ownerId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private Optional<? extends java.util.List<PhoneNumber>> phoneNumbers;

    /**
     * The URL of the photo of a person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photo_url")
    private JsonNullable<? extends String> photoUrl;

    /**
     * The PositionId the applicant applied for.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("position_id")
    private Optional<? extends String> positionId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_url")
    private JsonNullable<? extends String> recordUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recruiter_id")
    private Optional<? extends String> recruiterId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("social_links")
    private Optional<? extends java.util.List<SocialLinks>> socialLinks;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sources")
    private JsonNullable<? extends java.util.List<String>> sources;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stage_id")
    private Optional<? extends String> stageId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private JsonNullable<? extends java.util.List<String>> tags;

    /**
     * The job title of the person.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<? extends String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websites")
    private Optional<? extends java.util.List<Websites>> websites;

    public ApplicantInput(
            @JsonProperty("addresses") Optional<? extends java.util.List<Address>> addresses,
            @JsonProperty("anonymized") Optional<? extends Boolean> anonymized,
            @JsonProperty("application_ids") JsonNullable<? extends java.util.List<String>> applicationIds,
            @JsonProperty("applications") JsonNullable<? extends java.util.List<String>> applications,
            @JsonProperty("archived") JsonNullable<? extends Boolean> archived,
            @JsonProperty("birthday") JsonNullable<? extends LocalDate> birthday,
            @JsonProperty("confidential") Optional<? extends Boolean> confidential,
            @JsonProperty("coordinator_id") Optional<? extends String> coordinatorId,
            @JsonProperty("cover_letter") Optional<? extends String> coverLetter,
            @JsonProperty("custom_fields") Optional<? extends java.util.List<CustomField>> customFields,
            @JsonProperty("deleted") JsonNullable<? extends Boolean> deleted,
            @JsonProperty("emails") Optional<? extends java.util.List<Email>> emails,
            @JsonProperty("first_name") JsonNullable<? extends String> firstName,
            @JsonProperty("followers") JsonNullable<? extends java.util.List<String>> followers,
            @JsonProperty("headline") Optional<? extends String> headline,
            @JsonProperty("initials") JsonNullable<? extends String> initials,
            @JsonProperty("last_name") JsonNullable<? extends String> lastName,
            @JsonProperty("middle_name") JsonNullable<? extends String> middleName,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("owner_id") JsonNullable<? extends String> ownerId,
            @JsonProperty("phone_numbers") Optional<? extends java.util.List<PhoneNumber>> phoneNumbers,
            @JsonProperty("photo_url") JsonNullable<? extends String> photoUrl,
            @JsonProperty("position_id") Optional<? extends String> positionId,
            @JsonProperty("record_url") JsonNullable<? extends String> recordUrl,
            @JsonProperty("recruiter_id") Optional<? extends String> recruiterId,
            @JsonProperty("social_links") Optional<? extends java.util.List<SocialLinks>> socialLinks,
            @JsonProperty("sources") JsonNullable<? extends java.util.List<String>> sources,
            @JsonProperty("stage_id") Optional<? extends String> stageId,
            @JsonProperty("tags") JsonNullable<? extends java.util.List<String>> tags,
            @JsonProperty("title") JsonNullable<? extends String> title,
            @JsonProperty("websites") Optional<? extends java.util.List<Websites>> websites) {
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(anonymized, "anonymized");
        Utils.checkNotNull(applicationIds, "applicationIds");
        Utils.checkNotNull(applications, "applications");
        Utils.checkNotNull(archived, "archived");
        Utils.checkNotNull(birthday, "birthday");
        Utils.checkNotNull(confidential, "confidential");
        Utils.checkNotNull(coordinatorId, "coordinatorId");
        Utils.checkNotNull(coverLetter, "coverLetter");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(deleted, "deleted");
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(followers, "followers");
        Utils.checkNotNull(headline, "headline");
        Utils.checkNotNull(initials, "initials");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(middleName, "middleName");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(ownerId, "ownerId");
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        Utils.checkNotNull(photoUrl, "photoUrl");
        Utils.checkNotNull(positionId, "positionId");
        Utils.checkNotNull(recordUrl, "recordUrl");
        Utils.checkNotNull(recruiterId, "recruiterId");
        Utils.checkNotNull(socialLinks, "socialLinks");
        Utils.checkNotNull(sources, "sources");
        Utils.checkNotNull(stageId, "stageId");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(websites, "websites");
        this.addresses = addresses;
        this.anonymized = anonymized;
        this.applicationIds = applicationIds;
        this.applications = applications;
        this.archived = archived;
        this.birthday = birthday;
        this.confidential = confidential;
        this.coordinatorId = coordinatorId;
        this.coverLetter = coverLetter;
        this.customFields = customFields;
        this.deleted = deleted;
        this.emails = emails;
        this.firstName = firstName;
        this.followers = followers;
        this.headline = headline;
        this.initials = initials;
        this.lastName = lastName;
        this.middleName = middleName;
        this.name = name;
        this.ownerId = ownerId;
        this.phoneNumbers = phoneNumbers;
        this.photoUrl = photoUrl;
        this.positionId = positionId;
        this.recordUrl = recordUrl;
        this.recruiterId = recruiterId;
        this.socialLinks = socialLinks;
        this.sources = sources;
        this.stageId = stageId;
        this.tags = tags;
        this.title = title;
        this.websites = websites;
    }

    public Optional<? extends java.util.List<Address>> addresses() {
        return addresses;
    }

    public Optional<? extends Boolean> anonymized() {
        return anonymized;
    }

    public JsonNullable<? extends java.util.List<String>> applicationIds() {
        return applicationIds;
    }

    public JsonNullable<? extends java.util.List<String>> applications() {
        return applications;
    }

    public JsonNullable<? extends Boolean> archived() {
        return archived;
    }

    /**
     * The date of birth of the person.
     */
    public JsonNullable<? extends LocalDate> birthday() {
        return birthday;
    }

    public Optional<? extends Boolean> confidential() {
        return confidential;
    }

    public Optional<? extends String> coordinatorId() {
        return coordinatorId;
    }

    public Optional<? extends String> coverLetter() {
        return coverLetter;
    }

    public Optional<? extends java.util.List<CustomField>> customFields() {
        return customFields;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public JsonNullable<? extends Boolean> deleted() {
        return deleted;
    }

    public Optional<? extends java.util.List<Email>> emails() {
        return emails;
    }

    /**
     * The first name of the person.
     */
    public JsonNullable<? extends String> firstName() {
        return firstName;
    }

    public JsonNullable<? extends java.util.List<String>> followers() {
        return followers;
    }

    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    public Optional<? extends String> headline() {
        return headline;
    }

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    public JsonNullable<? extends String> initials() {
        return initials;
    }

    /**
     * The last name of the person.
     */
    public JsonNullable<? extends String> lastName() {
        return lastName;
    }

    /**
     * Middle name of the person.
     */
    public JsonNullable<? extends String> middleName() {
        return middleName;
    }

    /**
     * The name of an applicant.
     */
    public Optional<? extends String> name() {
        return name;
    }

    public JsonNullable<? extends String> ownerId() {
        return ownerId;
    }

    public Optional<? extends java.util.List<PhoneNumber>> phoneNumbers() {
        return phoneNumbers;
    }

    /**
     * The URL of the photo of a person.
     */
    public JsonNullable<? extends String> photoUrl() {
        return photoUrl;
    }

    /**
     * The PositionId the applicant applied for.
     */
    public Optional<? extends String> positionId() {
        return positionId;
    }

    public JsonNullable<? extends String> recordUrl() {
        return recordUrl;
    }

    public Optional<? extends String> recruiterId() {
        return recruiterId;
    }

    public Optional<? extends java.util.List<SocialLinks>> socialLinks() {
        return socialLinks;
    }

    public JsonNullable<? extends java.util.List<String>> sources() {
        return sources;
    }

    public Optional<? extends String> stageId() {
        return stageId;
    }

    public JsonNullable<? extends java.util.List<String>> tags() {
        return tags;
    }

    /**
     * The job title of the person.
     */
    public JsonNullable<? extends String> title() {
        return title;
    }

    public Optional<? extends java.util.List<Websites>> websites() {
        return websites;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ApplicantInput withAddresses(java.util.List<Address> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = Optional.ofNullable(addresses);
        return this;
    }

    public ApplicantInput withAddresses(Optional<? extends java.util.List<Address>> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    public ApplicantInput withAnonymized(boolean anonymized) {
        Utils.checkNotNull(anonymized, "anonymized");
        this.anonymized = Optional.ofNullable(anonymized);
        return this;
    }

    public ApplicantInput withAnonymized(Optional<? extends Boolean> anonymized) {
        Utils.checkNotNull(anonymized, "anonymized");
        this.anonymized = anonymized;
        return this;
    }

    public ApplicantInput withApplicationIds(java.util.List<String> applicationIds) {
        Utils.checkNotNull(applicationIds, "applicationIds");
        this.applicationIds = JsonNullable.of(applicationIds);
        return this;
    }

    public ApplicantInput withApplicationIds(JsonNullable<? extends java.util.List<String>> applicationIds) {
        Utils.checkNotNull(applicationIds, "applicationIds");
        this.applicationIds = applicationIds;
        return this;
    }

    public ApplicantInput withApplications(java.util.List<String> applications) {
        Utils.checkNotNull(applications, "applications");
        this.applications = JsonNullable.of(applications);
        return this;
    }

    public ApplicantInput withApplications(JsonNullable<? extends java.util.List<String>> applications) {
        Utils.checkNotNull(applications, "applications");
        this.applications = applications;
        return this;
    }

    public ApplicantInput withArchived(boolean archived) {
        Utils.checkNotNull(archived, "archived");
        this.archived = JsonNullable.of(archived);
        return this;
    }

    public ApplicantInput withArchived(JsonNullable<? extends Boolean> archived) {
        Utils.checkNotNull(archived, "archived");
        this.archived = archived;
        return this;
    }

    /**
     * The date of birth of the person.
     */
    public ApplicantInput withBirthday(LocalDate birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = JsonNullable.of(birthday);
        return this;
    }

    /**
     * The date of birth of the person.
     */
    public ApplicantInput withBirthday(JsonNullable<? extends LocalDate> birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = birthday;
        return this;
    }

    public ApplicantInput withConfidential(boolean confidential) {
        Utils.checkNotNull(confidential, "confidential");
        this.confidential = Optional.ofNullable(confidential);
        return this;
    }

    public ApplicantInput withConfidential(Optional<? extends Boolean> confidential) {
        Utils.checkNotNull(confidential, "confidential");
        this.confidential = confidential;
        return this;
    }

    public ApplicantInput withCoordinatorId(String coordinatorId) {
        Utils.checkNotNull(coordinatorId, "coordinatorId");
        this.coordinatorId = Optional.ofNullable(coordinatorId);
        return this;
    }

    public ApplicantInput withCoordinatorId(Optional<? extends String> coordinatorId) {
        Utils.checkNotNull(coordinatorId, "coordinatorId");
        this.coordinatorId = coordinatorId;
        return this;
    }

    public ApplicantInput withCoverLetter(String coverLetter) {
        Utils.checkNotNull(coverLetter, "coverLetter");
        this.coverLetter = Optional.ofNullable(coverLetter);
        return this;
    }

    public ApplicantInput withCoverLetter(Optional<? extends String> coverLetter) {
        Utils.checkNotNull(coverLetter, "coverLetter");
        this.coverLetter = coverLetter;
        return this;
    }

    public ApplicantInput withCustomFields(java.util.List<CustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }

    public ApplicantInput withCustomFields(Optional<? extends java.util.List<CustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public ApplicantInput withDeleted(boolean deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = JsonNullable.of(deleted);
        return this;
    }

    /**
     * Flag to indicate if the object is deleted.
     */
    public ApplicantInput withDeleted(JsonNullable<? extends Boolean> deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = deleted;
        return this;
    }

    public ApplicantInput withEmails(java.util.List<Email> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }

    public ApplicantInput withEmails(Optional<? extends java.util.List<Email>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    /**
     * The first name of the person.
     */
    public ApplicantInput withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    /**
     * The first name of the person.
     */
    public ApplicantInput withFirstName(JsonNullable<? extends String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    public ApplicantInput withFollowers(java.util.List<String> followers) {
        Utils.checkNotNull(followers, "followers");
        this.followers = JsonNullable.of(followers);
        return this;
    }

    public ApplicantInput withFollowers(JsonNullable<? extends java.util.List<String>> followers) {
        Utils.checkNotNull(followers, "followers");
        this.followers = followers;
        return this;
    }

    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    public ApplicantInput withHeadline(String headline) {
        Utils.checkNotNull(headline, "headline");
        this.headline = Optional.ofNullable(headline);
        return this;
    }

    /**
     * Typically a list of previous companies where the contact has worked or schools that the contact has attended
     */
    public ApplicantInput withHeadline(Optional<? extends String> headline) {
        Utils.checkNotNull(headline, "headline");
        this.headline = headline;
        return this;
    }

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    public ApplicantInput withInitials(String initials) {
        Utils.checkNotNull(initials, "initials");
        this.initials = JsonNullable.of(initials);
        return this;
    }

    /**
     * The initials of the person, usually derived from their first, middle, and last names.
     */
    public ApplicantInput withInitials(JsonNullable<? extends String> initials) {
        Utils.checkNotNull(initials, "initials");
        this.initials = initials;
        return this;
    }

    /**
     * The last name of the person.
     */
    public ApplicantInput withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    /**
     * The last name of the person.
     */
    public ApplicantInput withLastName(JsonNullable<? extends String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * Middle name of the person.
     */
    public ApplicantInput withMiddleName(String middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = JsonNullable.of(middleName);
        return this;
    }

    /**
     * Middle name of the person.
     */
    public ApplicantInput withMiddleName(JsonNullable<? extends String> middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = middleName;
        return this;
    }

    /**
     * The name of an applicant.
     */
    public ApplicantInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of an applicant.
     */
    public ApplicantInput withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public ApplicantInput withOwnerId(String ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }

    public ApplicantInput withOwnerId(JsonNullable<? extends String> ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = ownerId;
        return this;
    }

    public ApplicantInput withPhoneNumbers(java.util.List<PhoneNumber> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = Optional.ofNullable(phoneNumbers);
        return this;
    }

    public ApplicantInput withPhoneNumbers(Optional<? extends java.util.List<PhoneNumber>> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = phoneNumbers;
        return this;
    }

    /**
     * The URL of the photo of a person.
     */
    public ApplicantInput withPhotoUrl(String photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = JsonNullable.of(photoUrl);
        return this;
    }

    /**
     * The URL of the photo of a person.
     */
    public ApplicantInput withPhotoUrl(JsonNullable<? extends String> photoUrl) {
        Utils.checkNotNull(photoUrl, "photoUrl");
        this.photoUrl = photoUrl;
        return this;
    }

    /**
     * The PositionId the applicant applied for.
     */
    public ApplicantInput withPositionId(String positionId) {
        Utils.checkNotNull(positionId, "positionId");
        this.positionId = Optional.ofNullable(positionId);
        return this;
    }

    /**
     * The PositionId the applicant applied for.
     */
    public ApplicantInput withPositionId(Optional<? extends String> positionId) {
        Utils.checkNotNull(positionId, "positionId");
        this.positionId = positionId;
        return this;
    }

    public ApplicantInput withRecordUrl(String recordUrl) {
        Utils.checkNotNull(recordUrl, "recordUrl");
        this.recordUrl = JsonNullable.of(recordUrl);
        return this;
    }

    public ApplicantInput withRecordUrl(JsonNullable<? extends String> recordUrl) {
        Utils.checkNotNull(recordUrl, "recordUrl");
        this.recordUrl = recordUrl;
        return this;
    }

    public ApplicantInput withRecruiterId(String recruiterId) {
        Utils.checkNotNull(recruiterId, "recruiterId");
        this.recruiterId = Optional.ofNullable(recruiterId);
        return this;
    }

    public ApplicantInput withRecruiterId(Optional<? extends String> recruiterId) {
        Utils.checkNotNull(recruiterId, "recruiterId");
        this.recruiterId = recruiterId;
        return this;
    }

    public ApplicantInput withSocialLinks(java.util.List<SocialLinks> socialLinks) {
        Utils.checkNotNull(socialLinks, "socialLinks");
        this.socialLinks = Optional.ofNullable(socialLinks);
        return this;
    }

    public ApplicantInput withSocialLinks(Optional<? extends java.util.List<SocialLinks>> socialLinks) {
        Utils.checkNotNull(socialLinks, "socialLinks");
        this.socialLinks = socialLinks;
        return this;
    }

    public ApplicantInput withSources(java.util.List<String> sources) {
        Utils.checkNotNull(sources, "sources");
        this.sources = JsonNullable.of(sources);
        return this;
    }

    public ApplicantInput withSources(JsonNullable<? extends java.util.List<String>> sources) {
        Utils.checkNotNull(sources, "sources");
        this.sources = sources;
        return this;
    }

    public ApplicantInput withStageId(String stageId) {
        Utils.checkNotNull(stageId, "stageId");
        this.stageId = Optional.ofNullable(stageId);
        return this;
    }

    public ApplicantInput withStageId(Optional<? extends String> stageId) {
        Utils.checkNotNull(stageId, "stageId");
        this.stageId = stageId;
        return this;
    }

    public ApplicantInput withTags(java.util.List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = JsonNullable.of(tags);
        return this;
    }

    public ApplicantInput withTags(JsonNullable<? extends java.util.List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    /**
     * The job title of the person.
     */
    public ApplicantInput withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    /**
     * The job title of the person.
     */
    public ApplicantInput withTitle(JsonNullable<? extends String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public ApplicantInput withWebsites(java.util.List<Websites> websites) {
        Utils.checkNotNull(websites, "websites");
        this.websites = Optional.ofNullable(websites);
        return this;
    }

    public ApplicantInput withWebsites(Optional<? extends java.util.List<Websites>> websites) {
        Utils.checkNotNull(websites, "websites");
        this.websites = websites;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApplicantInput other = (ApplicantInput) o;
        return 
            java.util.Objects.deepEquals(this.addresses, other.addresses) &&
            java.util.Objects.deepEquals(this.anonymized, other.anonymized) &&
            java.util.Objects.deepEquals(this.applicationIds, other.applicationIds) &&
            java.util.Objects.deepEquals(this.applications, other.applications) &&
            java.util.Objects.deepEquals(this.archived, other.archived) &&
            java.util.Objects.deepEquals(this.birthday, other.birthday) &&
            java.util.Objects.deepEquals(this.confidential, other.confidential) &&
            java.util.Objects.deepEquals(this.coordinatorId, other.coordinatorId) &&
            java.util.Objects.deepEquals(this.coverLetter, other.coverLetter) &&
            java.util.Objects.deepEquals(this.customFields, other.customFields) &&
            java.util.Objects.deepEquals(this.deleted, other.deleted) &&
            java.util.Objects.deepEquals(this.emails, other.emails) &&
            java.util.Objects.deepEquals(this.firstName, other.firstName) &&
            java.util.Objects.deepEquals(this.followers, other.followers) &&
            java.util.Objects.deepEquals(this.headline, other.headline) &&
            java.util.Objects.deepEquals(this.initials, other.initials) &&
            java.util.Objects.deepEquals(this.lastName, other.lastName) &&
            java.util.Objects.deepEquals(this.middleName, other.middleName) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.ownerId, other.ownerId) &&
            java.util.Objects.deepEquals(this.phoneNumbers, other.phoneNumbers) &&
            java.util.Objects.deepEquals(this.photoUrl, other.photoUrl) &&
            java.util.Objects.deepEquals(this.positionId, other.positionId) &&
            java.util.Objects.deepEquals(this.recordUrl, other.recordUrl) &&
            java.util.Objects.deepEquals(this.recruiterId, other.recruiterId) &&
            java.util.Objects.deepEquals(this.socialLinks, other.socialLinks) &&
            java.util.Objects.deepEquals(this.sources, other.sources) &&
            java.util.Objects.deepEquals(this.stageId, other.stageId) &&
            java.util.Objects.deepEquals(this.tags, other.tags) &&
            java.util.Objects.deepEquals(this.title, other.title) &&
            java.util.Objects.deepEquals(this.websites, other.websites);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            addresses,
            anonymized,
            applicationIds,
            applications,
            archived,
            birthday,
            confidential,
            coordinatorId,
            coverLetter,
            customFields,
            deleted,
            emails,
            firstName,
            followers,
            headline,
            initials,
            lastName,
            middleName,
            name,
            ownerId,
            phoneNumbers,
            photoUrl,
            positionId,
            recordUrl,
            recruiterId,
            socialLinks,
            sources,
            stageId,
            tags,
            title,
            websites);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ApplicantInput.class,
                "addresses", addresses,
                "anonymized", anonymized,
                "applicationIds", applicationIds,
                "applications", applications,
                "archived", archived,
                "birthday", birthday,
                "confidential", confidential,
                "coordinatorId", coordinatorId,
                "coverLetter", coverLetter,
                "customFields", customFields,
                "deleted", deleted,
                "emails", emails,
                "firstName", firstName,
                "followers", followers,
                "headline", headline,
                "initials", initials,
                "lastName", lastName,
                "middleName", middleName,
                "name", name,
                "ownerId", ownerId,
                "phoneNumbers", phoneNumbers,
                "photoUrl", photoUrl,
                "positionId", positionId,
                "recordUrl", recordUrl,
                "recruiterId", recruiterId,
                "socialLinks", socialLinks,
                "sources", sources,
                "stageId", stageId,
                "tags", tags,
                "title", title,
                "websites", websites);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<Address>> addresses = Optional.empty();
 
        private Optional<? extends Boolean> anonymized = Optional.empty();
 
        private JsonNullable<? extends java.util.List<String>> applicationIds = JsonNullable.undefined();
 
        private JsonNullable<? extends java.util.List<String>> applications = JsonNullable.undefined();
 
        private JsonNullable<? extends Boolean> archived = JsonNullable.undefined();
 
        private JsonNullable<? extends LocalDate> birthday = JsonNullable.undefined();
 
        private Optional<? extends Boolean> confidential = Optional.empty();
 
        private Optional<? extends String> coordinatorId = Optional.empty();
 
        private Optional<? extends String> coverLetter = Optional.empty();
 
        private Optional<? extends java.util.List<CustomField>> customFields = Optional.empty();
 
        private JsonNullable<? extends Boolean> deleted = JsonNullable.undefined();
 
        private Optional<? extends java.util.List<Email>> emails = Optional.empty();
 
        private JsonNullable<? extends String> firstName = JsonNullable.undefined();
 
        private JsonNullable<? extends java.util.List<String>> followers = JsonNullable.undefined();
 
        private Optional<? extends String> headline = Optional.empty();
 
        private JsonNullable<? extends String> initials = JsonNullable.undefined();
 
        private JsonNullable<? extends String> lastName = JsonNullable.undefined();
 
        private JsonNullable<? extends String> middleName = JsonNullable.undefined();
 
        private Optional<? extends String> name = Optional.empty();
 
        private JsonNullable<? extends String> ownerId = JsonNullable.undefined();
 
        private Optional<? extends java.util.List<PhoneNumber>> phoneNumbers = Optional.empty();
 
        private JsonNullable<? extends String> photoUrl = JsonNullable.undefined();
 
        private Optional<? extends String> positionId = Optional.empty();
 
        private JsonNullable<? extends String> recordUrl = JsonNullable.undefined();
 
        private Optional<? extends String> recruiterId = Optional.empty();
 
        private Optional<? extends java.util.List<SocialLinks>> socialLinks = Optional.empty();
 
        private JsonNullable<? extends java.util.List<String>> sources = JsonNullable.undefined();
 
        private Optional<? extends String> stageId = Optional.empty();
 
        private JsonNullable<? extends java.util.List<String>> tags = JsonNullable.undefined();
 
        private JsonNullable<? extends String> title = JsonNullable.undefined();
 
        private Optional<? extends java.util.List<Websites>> websites = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder addresses(java.util.List<Address> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = Optional.ofNullable(addresses);
            return this;
        }

        public Builder addresses(Optional<? extends java.util.List<Address>> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }

        public Builder anonymized(boolean anonymized) {
            Utils.checkNotNull(anonymized, "anonymized");
            this.anonymized = Optional.ofNullable(anonymized);
            return this;
        }

        public Builder anonymized(Optional<? extends Boolean> anonymized) {
            Utils.checkNotNull(anonymized, "anonymized");
            this.anonymized = anonymized;
            return this;
        }

        public Builder applicationIds(java.util.List<String> applicationIds) {
            Utils.checkNotNull(applicationIds, "applicationIds");
            this.applicationIds = JsonNullable.of(applicationIds);
            return this;
        }

        public Builder applicationIds(JsonNullable<? extends java.util.List<String>> applicationIds) {
            Utils.checkNotNull(applicationIds, "applicationIds");
            this.applicationIds = applicationIds;
            return this;
        }

        public Builder applications(java.util.List<String> applications) {
            Utils.checkNotNull(applications, "applications");
            this.applications = JsonNullable.of(applications);
            return this;
        }

        public Builder applications(JsonNullable<? extends java.util.List<String>> applications) {
            Utils.checkNotNull(applications, "applications");
            this.applications = applications;
            return this;
        }

        public Builder archived(boolean archived) {
            Utils.checkNotNull(archived, "archived");
            this.archived = JsonNullable.of(archived);
            return this;
        }

        public Builder archived(JsonNullable<? extends Boolean> archived) {
            Utils.checkNotNull(archived, "archived");
            this.archived = archived;
            return this;
        }

        /**
         * The date of birth of the person.
         */
        public Builder birthday(LocalDate birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = JsonNullable.of(birthday);
            return this;
        }

        /**
         * The date of birth of the person.
         */
        public Builder birthday(JsonNullable<? extends LocalDate> birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = birthday;
            return this;
        }

        public Builder confidential(boolean confidential) {
            Utils.checkNotNull(confidential, "confidential");
            this.confidential = Optional.ofNullable(confidential);
            return this;
        }

        public Builder confidential(Optional<? extends Boolean> confidential) {
            Utils.checkNotNull(confidential, "confidential");
            this.confidential = confidential;
            return this;
        }

        public Builder coordinatorId(String coordinatorId) {
            Utils.checkNotNull(coordinatorId, "coordinatorId");
            this.coordinatorId = Optional.ofNullable(coordinatorId);
            return this;
        }

        public Builder coordinatorId(Optional<? extends String> coordinatorId) {
            Utils.checkNotNull(coordinatorId, "coordinatorId");
            this.coordinatorId = coordinatorId;
            return this;
        }

        public Builder coverLetter(String coverLetter) {
            Utils.checkNotNull(coverLetter, "coverLetter");
            this.coverLetter = Optional.ofNullable(coverLetter);
            return this;
        }

        public Builder coverLetter(Optional<? extends String> coverLetter) {
            Utils.checkNotNull(coverLetter, "coverLetter");
            this.coverLetter = coverLetter;
            return this;
        }

        public Builder customFields(java.util.List<CustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Optional<? extends java.util.List<CustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }

        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(boolean deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = JsonNullable.of(deleted);
            return this;
        }

        /**
         * Flag to indicate if the object is deleted.
         */
        public Builder deleted(JsonNullable<? extends Boolean> deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = deleted;
            return this;
        }

        public Builder emails(java.util.List<Email> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        public Builder emails(Optional<? extends java.util.List<Email>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }

        /**
         * The first name of the person.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The first name of the person.
         */
        public Builder firstName(JsonNullable<? extends String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        public Builder followers(java.util.List<String> followers) {
            Utils.checkNotNull(followers, "followers");
            this.followers = JsonNullable.of(followers);
            return this;
        }

        public Builder followers(JsonNullable<? extends java.util.List<String>> followers) {
            Utils.checkNotNull(followers, "followers");
            this.followers = followers;
            return this;
        }

        /**
         * Typically a list of previous companies where the contact has worked or schools that the contact has attended
         */
        public Builder headline(String headline) {
            Utils.checkNotNull(headline, "headline");
            this.headline = Optional.ofNullable(headline);
            return this;
        }

        /**
         * Typically a list of previous companies where the contact has worked or schools that the contact has attended
         */
        public Builder headline(Optional<? extends String> headline) {
            Utils.checkNotNull(headline, "headline");
            this.headline = headline;
            return this;
        }

        /**
         * The initials of the person, usually derived from their first, middle, and last names.
         */
        public Builder initials(String initials) {
            Utils.checkNotNull(initials, "initials");
            this.initials = JsonNullable.of(initials);
            return this;
        }

        /**
         * The initials of the person, usually derived from their first, middle, and last names.
         */
        public Builder initials(JsonNullable<? extends String> initials) {
            Utils.checkNotNull(initials, "initials");
            this.initials = initials;
            return this;
        }

        /**
         * The last name of the person.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The last name of the person.
         */
        public Builder lastName(JsonNullable<? extends String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * Middle name of the person.
         */
        public Builder middleName(String middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = JsonNullable.of(middleName);
            return this;
        }

        /**
         * Middle name of the person.
         */
        public Builder middleName(JsonNullable<? extends String> middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = middleName;
            return this;
        }

        /**
         * The name of an applicant.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of an applicant.
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder ownerId(String ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        public Builder ownerId(JsonNullable<? extends String> ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = ownerId;
            return this;
        }

        public Builder phoneNumbers(java.util.List<PhoneNumber> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = Optional.ofNullable(phoneNumbers);
            return this;
        }

        public Builder phoneNumbers(Optional<? extends java.util.List<PhoneNumber>> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        /**
         * The URL of the photo of a person.
         */
        public Builder photoUrl(String photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = JsonNullable.of(photoUrl);
            return this;
        }

        /**
         * The URL of the photo of a person.
         */
        public Builder photoUrl(JsonNullable<? extends String> photoUrl) {
            Utils.checkNotNull(photoUrl, "photoUrl");
            this.photoUrl = photoUrl;
            return this;
        }

        /**
         * The PositionId the applicant applied for.
         */
        public Builder positionId(String positionId) {
            Utils.checkNotNull(positionId, "positionId");
            this.positionId = Optional.ofNullable(positionId);
            return this;
        }

        /**
         * The PositionId the applicant applied for.
         */
        public Builder positionId(Optional<? extends String> positionId) {
            Utils.checkNotNull(positionId, "positionId");
            this.positionId = positionId;
            return this;
        }

        public Builder recordUrl(String recordUrl) {
            Utils.checkNotNull(recordUrl, "recordUrl");
            this.recordUrl = JsonNullable.of(recordUrl);
            return this;
        }

        public Builder recordUrl(JsonNullable<? extends String> recordUrl) {
            Utils.checkNotNull(recordUrl, "recordUrl");
            this.recordUrl = recordUrl;
            return this;
        }

        public Builder recruiterId(String recruiterId) {
            Utils.checkNotNull(recruiterId, "recruiterId");
            this.recruiterId = Optional.ofNullable(recruiterId);
            return this;
        }

        public Builder recruiterId(Optional<? extends String> recruiterId) {
            Utils.checkNotNull(recruiterId, "recruiterId");
            this.recruiterId = recruiterId;
            return this;
        }

        public Builder socialLinks(java.util.List<SocialLinks> socialLinks) {
            Utils.checkNotNull(socialLinks, "socialLinks");
            this.socialLinks = Optional.ofNullable(socialLinks);
            return this;
        }

        public Builder socialLinks(Optional<? extends java.util.List<SocialLinks>> socialLinks) {
            Utils.checkNotNull(socialLinks, "socialLinks");
            this.socialLinks = socialLinks;
            return this;
        }

        public Builder sources(java.util.List<String> sources) {
            Utils.checkNotNull(sources, "sources");
            this.sources = JsonNullable.of(sources);
            return this;
        }

        public Builder sources(JsonNullable<? extends java.util.List<String>> sources) {
            Utils.checkNotNull(sources, "sources");
            this.sources = sources;
            return this;
        }

        public Builder stageId(String stageId) {
            Utils.checkNotNull(stageId, "stageId");
            this.stageId = Optional.ofNullable(stageId);
            return this;
        }

        public Builder stageId(Optional<? extends String> stageId) {
            Utils.checkNotNull(stageId, "stageId");
            this.stageId = stageId;
            return this;
        }

        public Builder tags(java.util.List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = JsonNullable.of(tags);
            return this;
        }

        public Builder tags(JsonNullable<? extends java.util.List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }

        /**
         * The job title of the person.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * The job title of the person.
         */
        public Builder title(JsonNullable<? extends String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder websites(java.util.List<Websites> websites) {
            Utils.checkNotNull(websites, "websites");
            this.websites = Optional.ofNullable(websites);
            return this;
        }

        public Builder websites(Optional<? extends java.util.List<Websites>> websites) {
            Utils.checkNotNull(websites, "websites");
            this.websites = websites;
            return this;
        }
        
        public ApplicantInput build() {
            return new ApplicantInput(
                addresses,
                anonymized,
                applicationIds,
                applications,
                archived,
                birthday,
                confidential,
                coordinatorId,
                coverLetter,
                customFields,
                deleted,
                emails,
                firstName,
                followers,
                headline,
                initials,
                lastName,
                middleName,
                name,
                ownerId,
                phoneNumbers,
                photoUrl,
                positionId,
                recordUrl,
                recruiterId,
                socialLinks,
                sources,
                stageId,
                tags,
                title,
                websites);
        }
    }
}

