/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package apideck.ats.apideck.models.shared;

import apideck.ats.apideck.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * Meta - Response metadata
 */

public class Meta {

    /**
     * Cursors to navigate to previous or next pages through the API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cursors")
    private Optional<? extends Cursors> cursors;

    /**
     * Number of items returned in the data property of the response
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("items_on_page")
    private Optional<? extends Long> itemsOnPage;

    public Meta(
            @JsonProperty("cursors") Optional<? extends Cursors> cursors,
            @JsonProperty("items_on_page") Optional<? extends Long> itemsOnPage) {
        Utils.checkNotNull(cursors, "cursors");
        Utils.checkNotNull(itemsOnPage, "itemsOnPage");
        this.cursors = cursors;
        this.itemsOnPage = itemsOnPage;
    }

    /**
     * Cursors to navigate to previous or next pages through the API
     */
    public Optional<? extends Cursors> cursors() {
        return cursors;
    }

    /**
     * Number of items returned in the data property of the response
     */
    public Optional<? extends Long> itemsOnPage() {
        return itemsOnPage;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Cursors to navigate to previous or next pages through the API
     */
    public Meta withCursors(Cursors cursors) {
        Utils.checkNotNull(cursors, "cursors");
        this.cursors = Optional.ofNullable(cursors);
        return this;
    }

    /**
     * Cursors to navigate to previous or next pages through the API
     */
    public Meta withCursors(Optional<? extends Cursors> cursors) {
        Utils.checkNotNull(cursors, "cursors");
        this.cursors = cursors;
        return this;
    }

    /**
     * Number of items returned in the data property of the response
     */
    public Meta withItemsOnPage(long itemsOnPage) {
        Utils.checkNotNull(itemsOnPage, "itemsOnPage");
        this.itemsOnPage = Optional.ofNullable(itemsOnPage);
        return this;
    }

    /**
     * Number of items returned in the data property of the response
     */
    public Meta withItemsOnPage(Optional<? extends Long> itemsOnPage) {
        Utils.checkNotNull(itemsOnPage, "itemsOnPage");
        this.itemsOnPage = itemsOnPage;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Meta other = (Meta) o;
        return 
            java.util.Objects.deepEquals(this.cursors, other.cursors) &&
            java.util.Objects.deepEquals(this.itemsOnPage, other.itemsOnPage);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            cursors,
            itemsOnPage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Meta.class,
                "cursors", cursors,
                "itemsOnPage", itemsOnPage);
    }
    
    public final static class Builder {
 
        private Optional<? extends Cursors> cursors = Optional.empty();
 
        private Optional<? extends Long> itemsOnPage = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Cursors to navigate to previous or next pages through the API
         */
        public Builder cursors(Cursors cursors) {
            Utils.checkNotNull(cursors, "cursors");
            this.cursors = Optional.ofNullable(cursors);
            return this;
        }

        /**
         * Cursors to navigate to previous or next pages through the API
         */
        public Builder cursors(Optional<? extends Cursors> cursors) {
            Utils.checkNotNull(cursors, "cursors");
            this.cursors = cursors;
            return this;
        }

        /**
         * Number of items returned in the data property of the response
         */
        public Builder itemsOnPage(long itemsOnPage) {
            Utils.checkNotNull(itemsOnPage, "itemsOnPage");
            this.itemsOnPage = Optional.ofNullable(itemsOnPage);
            return this;
        }

        /**
         * Number of items returned in the data property of the response
         */
        public Builder itemsOnPage(Optional<? extends Long> itemsOnPage) {
            Utils.checkNotNull(itemsOnPage, "itemsOnPage");
            this.itemsOnPage = itemsOnPage;
            return this;
        }
        
        public Meta build() {
            return new Meta(
                cursors,
                itemsOnPage);
        }
    }
}

