/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package apideck.ats.apideck.models.operations;

import apideck.ats.apideck.utils.LazySingletonValue;
import apideck.ats.apideck.utils.SpeakeasyMetadata;
import apideck.ats.apideck.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ApplicationsAllRequest {

    /**
     * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cursor")
    private JsonNullable<? extends String> cursor;

    /**
     * Number of results to return. Minimum 1, Maximum 200, Default 20
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<? extends Long> limit;

    /**
     * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
     */
    @SpeakeasyMetadata("queryParam:style=deepObject,explode=true,name=pass_through")
    private Optional<? extends java.util.Map<String, java.lang.Object>> passThrough;

    /**
     * Include raw response. Mostly used for debugging purposes
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=raw")
    private Optional<? extends Boolean> raw;

    /**
     * The ID of your Unify application
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-app-id")
    private Optional<? extends String> xApideckAppId;

    /**
     * ID of the consumer which you want to get or push data from
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-consumer-id")
    private Optional<? extends String> xApideckConsumerId;

    /**
     * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-apideck-service-id")
    private Optional<? extends String> xApideckServiceId;

    public ApplicationsAllRequest(
            JsonNullable<? extends String> cursor,
            Optional<? extends Long> limit,
            Optional<? extends java.util.Map<String, java.lang.Object>> passThrough,
            Optional<? extends Boolean> raw,
            Optional<? extends String> xApideckAppId,
            Optional<? extends String> xApideckConsumerId,
            Optional<? extends String> xApideckServiceId) {
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(passThrough, "passThrough");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(xApideckAppId, "xApideckAppId");
        Utils.checkNotNull(xApideckConsumerId, "xApideckConsumerId");
        Utils.checkNotNull(xApideckServiceId, "xApideckServiceId");
        this.cursor = cursor;
        this.limit = limit;
        this.passThrough = passThrough;
        this.raw = raw;
        this.xApideckAppId = xApideckAppId;
        this.xApideckConsumerId = xApideckConsumerId;
        this.xApideckServiceId = xApideckServiceId;
    }

    /**
     * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
     */
    public JsonNullable<? extends String> cursor() {
        return cursor;
    }

    /**
     * Number of results to return. Minimum 1, Maximum 200, Default 20
     */
    public Optional<? extends Long> limit() {
        return limit;
    }

    /**
     * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
     */
    public Optional<? extends java.util.Map<String, java.lang.Object>> passThrough() {
        return passThrough;
    }

    /**
     * Include raw response. Mostly used for debugging purposes
     */
    public Optional<? extends Boolean> raw() {
        return raw;
    }

    /**
     * The ID of your Unify application
     */
    public Optional<? extends String> xApideckAppId() {
        return xApideckAppId;
    }

    /**
     * ID of the consumer which you want to get or push data from
     */
    public Optional<? extends String> xApideckConsumerId() {
        return xApideckConsumerId;
    }

    /**
     * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
     */
    public Optional<? extends String> xApideckServiceId() {
        return xApideckServiceId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
     */
    public ApplicationsAllRequest withCursor(String cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = JsonNullable.of(cursor);
        return this;
    }

    /**
     * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
     */
    public ApplicationsAllRequest withCursor(JsonNullable<? extends String> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    /**
     * Number of results to return. Minimum 1, Maximum 200, Default 20
     */
    public ApplicationsAllRequest withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }

    /**
     * Number of results to return. Minimum 1, Maximum 200, Default 20
     */
    public ApplicationsAllRequest withLimit(Optional<? extends Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    /**
     * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
     */
    public ApplicationsAllRequest withPassThrough(java.util.Map<String, java.lang.Object> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = Optional.ofNullable(passThrough);
        return this;
    }

    /**
     * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
     */
    public ApplicationsAllRequest withPassThrough(Optional<? extends java.util.Map<String, java.lang.Object>> passThrough) {
        Utils.checkNotNull(passThrough, "passThrough");
        this.passThrough = passThrough;
        return this;
    }

    /**
     * Include raw response. Mostly used for debugging purposes
     */
    public ApplicationsAllRequest withRaw(boolean raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    /**
     * Include raw response. Mostly used for debugging purposes
     */
    public ApplicationsAllRequest withRaw(Optional<? extends Boolean> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    /**
     * The ID of your Unify application
     */
    public ApplicationsAllRequest withXApideckAppId(String xApideckAppId) {
        Utils.checkNotNull(xApideckAppId, "xApideckAppId");
        this.xApideckAppId = Optional.ofNullable(xApideckAppId);
        return this;
    }

    /**
     * The ID of your Unify application
     */
    public ApplicationsAllRequest withXApideckAppId(Optional<? extends String> xApideckAppId) {
        Utils.checkNotNull(xApideckAppId, "xApideckAppId");
        this.xApideckAppId = xApideckAppId;
        return this;
    }

    /**
     * ID of the consumer which you want to get or push data from
     */
    public ApplicationsAllRequest withXApideckConsumerId(String xApideckConsumerId) {
        Utils.checkNotNull(xApideckConsumerId, "xApideckConsumerId");
        this.xApideckConsumerId = Optional.ofNullable(xApideckConsumerId);
        return this;
    }

    /**
     * ID of the consumer which you want to get or push data from
     */
    public ApplicationsAllRequest withXApideckConsumerId(Optional<? extends String> xApideckConsumerId) {
        Utils.checkNotNull(xApideckConsumerId, "xApideckConsumerId");
        this.xApideckConsumerId = xApideckConsumerId;
        return this;
    }

    /**
     * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
     */
    public ApplicationsAllRequest withXApideckServiceId(String xApideckServiceId) {
        Utils.checkNotNull(xApideckServiceId, "xApideckServiceId");
        this.xApideckServiceId = Optional.ofNullable(xApideckServiceId);
        return this;
    }

    /**
     * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
     */
    public ApplicationsAllRequest withXApideckServiceId(Optional<? extends String> xApideckServiceId) {
        Utils.checkNotNull(xApideckServiceId, "xApideckServiceId");
        this.xApideckServiceId = xApideckServiceId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApplicationsAllRequest other = (ApplicationsAllRequest) o;
        return 
            java.util.Objects.deepEquals(this.cursor, other.cursor) &&
            java.util.Objects.deepEquals(this.limit, other.limit) &&
            java.util.Objects.deepEquals(this.passThrough, other.passThrough) &&
            java.util.Objects.deepEquals(this.raw, other.raw) &&
            java.util.Objects.deepEquals(this.xApideckAppId, other.xApideckAppId) &&
            java.util.Objects.deepEquals(this.xApideckConsumerId, other.xApideckConsumerId) &&
            java.util.Objects.deepEquals(this.xApideckServiceId, other.xApideckServiceId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            cursor,
            limit,
            passThrough,
            raw,
            xApideckAppId,
            xApideckConsumerId,
            xApideckServiceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ApplicationsAllRequest.class,
                "cursor", cursor,
                "limit", limit,
                "passThrough", passThrough,
                "raw", raw,
                "xApideckAppId", xApideckAppId,
                "xApideckConsumerId", xApideckConsumerId,
                "xApideckServiceId", xApideckServiceId);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends String> cursor = JsonNullable.undefined();
 
        private Optional<? extends Long> limit;
 
        private Optional<? extends java.util.Map<String, java.lang.Object>> passThrough = Optional.empty();
 
        private Optional<? extends Boolean> raw;
 
        private Optional<? extends String> xApideckAppId = Optional.empty();
 
        private Optional<? extends String> xApideckConsumerId = Optional.empty();
 
        private Optional<? extends String> xApideckServiceId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
         */
        public Builder cursor(String cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = JsonNullable.of(cursor);
            return this;
        }

        /**
         * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
         */
        public Builder cursor(JsonNullable<? extends String> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }

        /**
         * Number of results to return. Minimum 1, Maximum 200, Default 20
         */
        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * Number of results to return. Minimum 1, Maximum 200, Default 20
         */
        public Builder limit(Optional<? extends Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        /**
         * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
         */
        public Builder passThrough(java.util.Map<String, java.lang.Object> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = Optional.ofNullable(passThrough);
            return this;
        }

        /**
         * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
         */
        public Builder passThrough(Optional<? extends java.util.Map<String, java.lang.Object>> passThrough) {
            Utils.checkNotNull(passThrough, "passThrough");
            this.passThrough = passThrough;
            return this;
        }

        /**
         * Include raw response. Mostly used for debugging purposes
         */
        public Builder raw(boolean raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        /**
         * Include raw response. Mostly used for debugging purposes
         */
        public Builder raw(Optional<? extends Boolean> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        /**
         * The ID of your Unify application
         */
        public Builder xApideckAppId(String xApideckAppId) {
            Utils.checkNotNull(xApideckAppId, "xApideckAppId");
            this.xApideckAppId = Optional.ofNullable(xApideckAppId);
            return this;
        }

        /**
         * The ID of your Unify application
         */
        public Builder xApideckAppId(Optional<? extends String> xApideckAppId) {
            Utils.checkNotNull(xApideckAppId, "xApideckAppId");
            this.xApideckAppId = xApideckAppId;
            return this;
        }

        /**
         * ID of the consumer which you want to get or push data from
         */
        public Builder xApideckConsumerId(String xApideckConsumerId) {
            Utils.checkNotNull(xApideckConsumerId, "xApideckConsumerId");
            this.xApideckConsumerId = Optional.ofNullable(xApideckConsumerId);
            return this;
        }

        /**
         * ID of the consumer which you want to get or push data from
         */
        public Builder xApideckConsumerId(Optional<? extends String> xApideckConsumerId) {
            Utils.checkNotNull(xApideckConsumerId, "xApideckConsumerId");
            this.xApideckConsumerId = xApideckConsumerId;
            return this;
        }

        /**
         * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
         */
        public Builder xApideckServiceId(String xApideckServiceId) {
            Utils.checkNotNull(xApideckServiceId, "xApideckServiceId");
            this.xApideckServiceId = Optional.ofNullable(xApideckServiceId);
            return this;
        }

        /**
         * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
         */
        public Builder xApideckServiceId(Optional<? extends String> xApideckServiceId) {
            Utils.checkNotNull(xApideckServiceId, "xApideckServiceId");
            this.xApideckServiceId = xApideckServiceId;
            return this;
        }
        
        public ApplicationsAllRequest build() {
            if (limit == null) {
                limit = _SINGLETON_VALUE_Limit.value();
            }
            if (raw == null) {
                raw = _SINGLETON_VALUE_Raw.value();
            }
            return new ApplicationsAllRequest(
                cursor,
                limit,
                passThrough,
                raw,
                xApideckAppId,
                xApideckConsumerId,
                xApideckServiceId);
        }

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "20",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_Raw =
                new LazySingletonValue<>(
                        "raw",
                        "false",
                        new TypeReference<Optional<? extends Boolean>>() {});
    }
}

