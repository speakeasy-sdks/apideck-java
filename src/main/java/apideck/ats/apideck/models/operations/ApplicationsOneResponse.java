/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package apideck.ats.apideck.models.operations;

import apideck.ats.apideck.utils.Utils;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.util.Optional;


public class ApplicationsOneResponse implements apideck.ats.apideck.utils.Response {

    /**
     * Bad Request
     */
    private Optional<? extends apideck.ats.apideck.models.shared.BadRequestResponse> badRequestResponse;

    /**
     * HTTP response content type for this operation
     */
    private String contentType;

    /**
     * Applications
     */
    private Optional<? extends apideck.ats.apideck.models.shared.GetApplicationResponse> getApplicationResponse;

    /**
     * The specified resource was not found
     */
    private Optional<? extends apideck.ats.apideck.models.shared.NotFoundResponse> notFoundResponse;

    /**
     * Payment Required
     */
    private Optional<? extends apideck.ats.apideck.models.shared.PaymentRequiredResponse> paymentRequiredResponse;

    /**
     * HTTP response status code for this operation
     */
    private int statusCode;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    private HttpResponse<InputStream> rawResponse;

    /**
     * Unauthorized
     */
    private Optional<? extends apideck.ats.apideck.models.shared.UnauthorizedResponse> unauthorizedResponse;

    /**
     * Unexpected error
     */
    private Optional<? extends apideck.ats.apideck.models.shared.UnexpectedErrorResponse> unexpectedErrorResponse;

    /**
     * Unprocessable
     */
    private Optional<? extends apideck.ats.apideck.models.shared.UnprocessableResponse> unprocessableResponse;

    public ApplicationsOneResponse(
            Optional<? extends apideck.ats.apideck.models.shared.BadRequestResponse> badRequestResponse,
            String contentType,
            Optional<? extends apideck.ats.apideck.models.shared.GetApplicationResponse> getApplicationResponse,
            Optional<? extends apideck.ats.apideck.models.shared.NotFoundResponse> notFoundResponse,
            Optional<? extends apideck.ats.apideck.models.shared.PaymentRequiredResponse> paymentRequiredResponse,
            int statusCode,
            HttpResponse<InputStream> rawResponse,
            Optional<? extends apideck.ats.apideck.models.shared.UnauthorizedResponse> unauthorizedResponse,
            Optional<? extends apideck.ats.apideck.models.shared.UnexpectedErrorResponse> unexpectedErrorResponse,
            Optional<? extends apideck.ats.apideck.models.shared.UnprocessableResponse> unprocessableResponse) {
        Utils.checkNotNull(badRequestResponse, "badRequestResponse");
        Utils.checkNotNull(contentType, "contentType");
        Utils.checkNotNull(getApplicationResponse, "getApplicationResponse");
        Utils.checkNotNull(notFoundResponse, "notFoundResponse");
        Utils.checkNotNull(paymentRequiredResponse, "paymentRequiredResponse");
        Utils.checkNotNull(statusCode, "statusCode");
        Utils.checkNotNull(rawResponse, "rawResponse");
        Utils.checkNotNull(unauthorizedResponse, "unauthorizedResponse");
        Utils.checkNotNull(unexpectedErrorResponse, "unexpectedErrorResponse");
        Utils.checkNotNull(unprocessableResponse, "unprocessableResponse");
        this.badRequestResponse = badRequestResponse;
        this.contentType = contentType;
        this.getApplicationResponse = getApplicationResponse;
        this.notFoundResponse = notFoundResponse;
        this.paymentRequiredResponse = paymentRequiredResponse;
        this.statusCode = statusCode;
        this.rawResponse = rawResponse;
        this.unauthorizedResponse = unauthorizedResponse;
        this.unexpectedErrorResponse = unexpectedErrorResponse;
        this.unprocessableResponse = unprocessableResponse;
    }

    /**
     * Bad Request
     */
    public Optional<? extends apideck.ats.apideck.models.shared.BadRequestResponse> badRequestResponse() {
        return badRequestResponse;
    }

    /**
     * HTTP response content type for this operation
     */
    public String contentType() {
        return contentType;
    }

    /**
     * Applications
     */
    public Optional<? extends apideck.ats.apideck.models.shared.GetApplicationResponse> getApplicationResponse() {
        return getApplicationResponse;
    }

    /**
     * The specified resource was not found
     */
    public Optional<? extends apideck.ats.apideck.models.shared.NotFoundResponse> notFoundResponse() {
        return notFoundResponse;
    }

    /**
     * Payment Required
     */
    public Optional<? extends apideck.ats.apideck.models.shared.PaymentRequiredResponse> paymentRequiredResponse() {
        return paymentRequiredResponse;
    }

    /**
     * HTTP response status code for this operation
     */
    public int statusCode() {
        return statusCode;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public HttpResponse<InputStream> rawResponse() {
        return rawResponse;
    }

    /**
     * Unauthorized
     */
    public Optional<? extends apideck.ats.apideck.models.shared.UnauthorizedResponse> unauthorizedResponse() {
        return unauthorizedResponse;
    }

    /**
     * Unexpected error
     */
    public Optional<? extends apideck.ats.apideck.models.shared.UnexpectedErrorResponse> unexpectedErrorResponse() {
        return unexpectedErrorResponse;
    }

    /**
     * Unprocessable
     */
    public Optional<? extends apideck.ats.apideck.models.shared.UnprocessableResponse> unprocessableResponse() {
        return unprocessableResponse;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Bad Request
     */
    public ApplicationsOneResponse withBadRequestResponse(apideck.ats.apideck.models.shared.BadRequestResponse badRequestResponse) {
        Utils.checkNotNull(badRequestResponse, "badRequestResponse");
        this.badRequestResponse = Optional.ofNullable(badRequestResponse);
        return this;
    }

    /**
     * Bad Request
     */
    public ApplicationsOneResponse withBadRequestResponse(Optional<? extends apideck.ats.apideck.models.shared.BadRequestResponse> badRequestResponse) {
        Utils.checkNotNull(badRequestResponse, "badRequestResponse");
        this.badRequestResponse = badRequestResponse;
        return this;
    }

    /**
     * HTTP response content type for this operation
     */
    public ApplicationsOneResponse withContentType(String contentType) {
        Utils.checkNotNull(contentType, "contentType");
        this.contentType = contentType;
        return this;
    }

    /**
     * Applications
     */
    public ApplicationsOneResponse withGetApplicationResponse(apideck.ats.apideck.models.shared.GetApplicationResponse getApplicationResponse) {
        Utils.checkNotNull(getApplicationResponse, "getApplicationResponse");
        this.getApplicationResponse = Optional.ofNullable(getApplicationResponse);
        return this;
    }

    /**
     * Applications
     */
    public ApplicationsOneResponse withGetApplicationResponse(Optional<? extends apideck.ats.apideck.models.shared.GetApplicationResponse> getApplicationResponse) {
        Utils.checkNotNull(getApplicationResponse, "getApplicationResponse");
        this.getApplicationResponse = getApplicationResponse;
        return this;
    }

    /**
     * The specified resource was not found
     */
    public ApplicationsOneResponse withNotFoundResponse(apideck.ats.apideck.models.shared.NotFoundResponse notFoundResponse) {
        Utils.checkNotNull(notFoundResponse, "notFoundResponse");
        this.notFoundResponse = Optional.ofNullable(notFoundResponse);
        return this;
    }

    /**
     * The specified resource was not found
     */
    public ApplicationsOneResponse withNotFoundResponse(Optional<? extends apideck.ats.apideck.models.shared.NotFoundResponse> notFoundResponse) {
        Utils.checkNotNull(notFoundResponse, "notFoundResponse");
        this.notFoundResponse = notFoundResponse;
        return this;
    }

    /**
     * Payment Required
     */
    public ApplicationsOneResponse withPaymentRequiredResponse(apideck.ats.apideck.models.shared.PaymentRequiredResponse paymentRequiredResponse) {
        Utils.checkNotNull(paymentRequiredResponse, "paymentRequiredResponse");
        this.paymentRequiredResponse = Optional.ofNullable(paymentRequiredResponse);
        return this;
    }

    /**
     * Payment Required
     */
    public ApplicationsOneResponse withPaymentRequiredResponse(Optional<? extends apideck.ats.apideck.models.shared.PaymentRequiredResponse> paymentRequiredResponse) {
        Utils.checkNotNull(paymentRequiredResponse, "paymentRequiredResponse");
        this.paymentRequiredResponse = paymentRequiredResponse;
        return this;
    }

    /**
     * HTTP response status code for this operation
     */
    public ApplicationsOneResponse withStatusCode(int statusCode) {
        Utils.checkNotNull(statusCode, "statusCode");
        this.statusCode = statusCode;
        return this;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public ApplicationsOneResponse withRawResponse(HttpResponse<InputStream> rawResponse) {
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.rawResponse = rawResponse;
        return this;
    }

    /**
     * Unauthorized
     */
    public ApplicationsOneResponse withUnauthorizedResponse(apideck.ats.apideck.models.shared.UnauthorizedResponse unauthorizedResponse) {
        Utils.checkNotNull(unauthorizedResponse, "unauthorizedResponse");
        this.unauthorizedResponse = Optional.ofNullable(unauthorizedResponse);
        return this;
    }

    /**
     * Unauthorized
     */
    public ApplicationsOneResponse withUnauthorizedResponse(Optional<? extends apideck.ats.apideck.models.shared.UnauthorizedResponse> unauthorizedResponse) {
        Utils.checkNotNull(unauthorizedResponse, "unauthorizedResponse");
        this.unauthorizedResponse = unauthorizedResponse;
        return this;
    }

    /**
     * Unexpected error
     */
    public ApplicationsOneResponse withUnexpectedErrorResponse(apideck.ats.apideck.models.shared.UnexpectedErrorResponse unexpectedErrorResponse) {
        Utils.checkNotNull(unexpectedErrorResponse, "unexpectedErrorResponse");
        this.unexpectedErrorResponse = Optional.ofNullable(unexpectedErrorResponse);
        return this;
    }

    /**
     * Unexpected error
     */
    public ApplicationsOneResponse withUnexpectedErrorResponse(Optional<? extends apideck.ats.apideck.models.shared.UnexpectedErrorResponse> unexpectedErrorResponse) {
        Utils.checkNotNull(unexpectedErrorResponse, "unexpectedErrorResponse");
        this.unexpectedErrorResponse = unexpectedErrorResponse;
        return this;
    }

    /**
     * Unprocessable
     */
    public ApplicationsOneResponse withUnprocessableResponse(apideck.ats.apideck.models.shared.UnprocessableResponse unprocessableResponse) {
        Utils.checkNotNull(unprocessableResponse, "unprocessableResponse");
        this.unprocessableResponse = Optional.ofNullable(unprocessableResponse);
        return this;
    }

    /**
     * Unprocessable
     */
    public ApplicationsOneResponse withUnprocessableResponse(Optional<? extends apideck.ats.apideck.models.shared.UnprocessableResponse> unprocessableResponse) {
        Utils.checkNotNull(unprocessableResponse, "unprocessableResponse");
        this.unprocessableResponse = unprocessableResponse;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApplicationsOneResponse other = (ApplicationsOneResponse) o;
        return 
            java.util.Objects.deepEquals(this.badRequestResponse, other.badRequestResponse) &&
            java.util.Objects.deepEquals(this.contentType, other.contentType) &&
            java.util.Objects.deepEquals(this.getApplicationResponse, other.getApplicationResponse) &&
            java.util.Objects.deepEquals(this.notFoundResponse, other.notFoundResponse) &&
            java.util.Objects.deepEquals(this.paymentRequiredResponse, other.paymentRequiredResponse) &&
            java.util.Objects.deepEquals(this.statusCode, other.statusCode) &&
            java.util.Objects.deepEquals(this.rawResponse, other.rawResponse) &&
            java.util.Objects.deepEquals(this.unauthorizedResponse, other.unauthorizedResponse) &&
            java.util.Objects.deepEquals(this.unexpectedErrorResponse, other.unexpectedErrorResponse) &&
            java.util.Objects.deepEquals(this.unprocessableResponse, other.unprocessableResponse);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            badRequestResponse,
            contentType,
            getApplicationResponse,
            notFoundResponse,
            paymentRequiredResponse,
            statusCode,
            rawResponse,
            unauthorizedResponse,
            unexpectedErrorResponse,
            unprocessableResponse);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ApplicationsOneResponse.class,
                "badRequestResponse", badRequestResponse,
                "contentType", contentType,
                "getApplicationResponse", getApplicationResponse,
                "notFoundResponse", notFoundResponse,
                "paymentRequiredResponse", paymentRequiredResponse,
                "statusCode", statusCode,
                "rawResponse", rawResponse,
                "unauthorizedResponse", unauthorizedResponse,
                "unexpectedErrorResponse", unexpectedErrorResponse,
                "unprocessableResponse", unprocessableResponse);
    }
    
    public final static class Builder {
 
        private Optional<? extends apideck.ats.apideck.models.shared.BadRequestResponse> badRequestResponse = Optional.empty();
 
        private String contentType;
 
        private Optional<? extends apideck.ats.apideck.models.shared.GetApplicationResponse> getApplicationResponse = Optional.empty();
 
        private Optional<? extends apideck.ats.apideck.models.shared.NotFoundResponse> notFoundResponse = Optional.empty();
 
        private Optional<? extends apideck.ats.apideck.models.shared.PaymentRequiredResponse> paymentRequiredResponse = Optional.empty();
 
        private Integer statusCode;
 
        private HttpResponse<InputStream> rawResponse;
 
        private Optional<? extends apideck.ats.apideck.models.shared.UnauthorizedResponse> unauthorizedResponse = Optional.empty();
 
        private Optional<? extends apideck.ats.apideck.models.shared.UnexpectedErrorResponse> unexpectedErrorResponse = Optional.empty();
 
        private Optional<? extends apideck.ats.apideck.models.shared.UnprocessableResponse> unprocessableResponse = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Bad Request
         */
        public Builder badRequestResponse(apideck.ats.apideck.models.shared.BadRequestResponse badRequestResponse) {
            Utils.checkNotNull(badRequestResponse, "badRequestResponse");
            this.badRequestResponse = Optional.ofNullable(badRequestResponse);
            return this;
        }

        /**
         * Bad Request
         */
        public Builder badRequestResponse(Optional<? extends apideck.ats.apideck.models.shared.BadRequestResponse> badRequestResponse) {
            Utils.checkNotNull(badRequestResponse, "badRequestResponse");
            this.badRequestResponse = badRequestResponse;
            return this;
        }

        /**
         * HTTP response content type for this operation
         */
        public Builder contentType(String contentType) {
            Utils.checkNotNull(contentType, "contentType");
            this.contentType = contentType;
            return this;
        }

        /**
         * Applications
         */
        public Builder getApplicationResponse(apideck.ats.apideck.models.shared.GetApplicationResponse getApplicationResponse) {
            Utils.checkNotNull(getApplicationResponse, "getApplicationResponse");
            this.getApplicationResponse = Optional.ofNullable(getApplicationResponse);
            return this;
        }

        /**
         * Applications
         */
        public Builder getApplicationResponse(Optional<? extends apideck.ats.apideck.models.shared.GetApplicationResponse> getApplicationResponse) {
            Utils.checkNotNull(getApplicationResponse, "getApplicationResponse");
            this.getApplicationResponse = getApplicationResponse;
            return this;
        }

        /**
         * The specified resource was not found
         */
        public Builder notFoundResponse(apideck.ats.apideck.models.shared.NotFoundResponse notFoundResponse) {
            Utils.checkNotNull(notFoundResponse, "notFoundResponse");
            this.notFoundResponse = Optional.ofNullable(notFoundResponse);
            return this;
        }

        /**
         * The specified resource was not found
         */
        public Builder notFoundResponse(Optional<? extends apideck.ats.apideck.models.shared.NotFoundResponse> notFoundResponse) {
            Utils.checkNotNull(notFoundResponse, "notFoundResponse");
            this.notFoundResponse = notFoundResponse;
            return this;
        }

        /**
         * Payment Required
         */
        public Builder paymentRequiredResponse(apideck.ats.apideck.models.shared.PaymentRequiredResponse paymentRequiredResponse) {
            Utils.checkNotNull(paymentRequiredResponse, "paymentRequiredResponse");
            this.paymentRequiredResponse = Optional.ofNullable(paymentRequiredResponse);
            return this;
        }

        /**
         * Payment Required
         */
        public Builder paymentRequiredResponse(Optional<? extends apideck.ats.apideck.models.shared.PaymentRequiredResponse> paymentRequiredResponse) {
            Utils.checkNotNull(paymentRequiredResponse, "paymentRequiredResponse");
            this.paymentRequiredResponse = paymentRequiredResponse;
            return this;
        }

        /**
         * HTTP response status code for this operation
         */
        public Builder statusCode(int statusCode) {
            Utils.checkNotNull(statusCode, "statusCode");
            this.statusCode = statusCode;
            return this;
        }

        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(HttpResponse<InputStream> rawResponse) {
            Utils.checkNotNull(rawResponse, "rawResponse");
            this.rawResponse = rawResponse;
            return this;
        }

        /**
         * Unauthorized
         */
        public Builder unauthorizedResponse(apideck.ats.apideck.models.shared.UnauthorizedResponse unauthorizedResponse) {
            Utils.checkNotNull(unauthorizedResponse, "unauthorizedResponse");
            this.unauthorizedResponse = Optional.ofNullable(unauthorizedResponse);
            return this;
        }

        /**
         * Unauthorized
         */
        public Builder unauthorizedResponse(Optional<? extends apideck.ats.apideck.models.shared.UnauthorizedResponse> unauthorizedResponse) {
            Utils.checkNotNull(unauthorizedResponse, "unauthorizedResponse");
            this.unauthorizedResponse = unauthorizedResponse;
            return this;
        }

        /**
         * Unexpected error
         */
        public Builder unexpectedErrorResponse(apideck.ats.apideck.models.shared.UnexpectedErrorResponse unexpectedErrorResponse) {
            Utils.checkNotNull(unexpectedErrorResponse, "unexpectedErrorResponse");
            this.unexpectedErrorResponse = Optional.ofNullable(unexpectedErrorResponse);
            return this;
        }

        /**
         * Unexpected error
         */
        public Builder unexpectedErrorResponse(Optional<? extends apideck.ats.apideck.models.shared.UnexpectedErrorResponse> unexpectedErrorResponse) {
            Utils.checkNotNull(unexpectedErrorResponse, "unexpectedErrorResponse");
            this.unexpectedErrorResponse = unexpectedErrorResponse;
            return this;
        }

        /**
         * Unprocessable
         */
        public Builder unprocessableResponse(apideck.ats.apideck.models.shared.UnprocessableResponse unprocessableResponse) {
            Utils.checkNotNull(unprocessableResponse, "unprocessableResponse");
            this.unprocessableResponse = Optional.ofNullable(unprocessableResponse);
            return this;
        }

        /**
         * Unprocessable
         */
        public Builder unprocessableResponse(Optional<? extends apideck.ats.apideck.models.shared.UnprocessableResponse> unprocessableResponse) {
            Utils.checkNotNull(unprocessableResponse, "unprocessableResponse");
            this.unprocessableResponse = unprocessableResponse;
            return this;
        }
        
        public ApplicationsOneResponse build() {
            return new ApplicationsOneResponse(
                badRequestResponse,
                contentType,
                getApplicationResponse,
                notFoundResponse,
                paymentRequiredResponse,
                statusCode,
                rawResponse,
                unauthorizedResponse,
                unexpectedErrorResponse,
                unprocessableResponse);
        }
    }
}

